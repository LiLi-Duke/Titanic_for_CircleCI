/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-06-09T19:06:01.044-04:00
  3.10.4.8
  
  Standalone prediction code with sample test data for GBMModel named titanic_model

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/titanic_model > titanic_model.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m titanic_model.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="titanic_model", algorithm="gbm")
public class titanic_model extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 8; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_titanic_model.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* Sex */ titanic_model_ColInfo_0.VALUES,
    /* Age */ null,
    /* SibSp */ null,
    /* Parch */ null,
    /* Ticket */ null,
    /* Fare */ null,
    /* Cabin */ titanic_model_ColInfo_6.VALUES,
    /* Embarked */ titanic_model_ColInfo_7.VALUES,
    /* Survived */ titanic_model_ColInfo_8.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.6109550561797753,0.3890449438202247};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.6109550561797753,0.3890449438202247};

  public titanic_model() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-9043923646539512773L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    titanic_model_Forest_0.score0(data,preds);
    titanic_model_Forest_1.score0(data,preds);
    titanic_model_Forest_2.score0(data,preds);
    titanic_model_Forest_3.score0(data,preds);
    titanic_model_Forest_4.score0(data,preds);
    titanic_model_Forest_5.score0(data,preds);
    titanic_model_Forest_6.score0(data,preds);
    titanic_model_Forest_7.score0(data,preds);
    titanic_model_Forest_8.score0(data,preds);
    titanic_model_Forest_9.score0(data,preds);
    titanic_model_Forest_10.score0(data,preds);
    titanic_model_Forest_11.score0(data,preds);
    titanic_model_Forest_12.score0(data,preds);
    titanic_model_Forest_13.score0(data,preds);
    titanic_model_Forest_14.score0(data,preds);
    titanic_model_Forest_15.score0(data,preds);
    titanic_model_Forest_16.score0(data,preds);
    titanic_model_Forest_17.score0(data,preds);
    titanic_model_Forest_18.score0(data,preds);
    titanic_model_Forest_19.score0(data,preds);
    titanic_model_Forest_20.score0(data,preds);
    titanic_model_Forest_21.score0(data,preds);
    titanic_model_Forest_22.score0(data,preds);
    titanic_model_Forest_23.score0(data,preds);
    titanic_model_Forest_24.score0(data,preds);
    titanic_model_Forest_25.score0(data,preds);
    titanic_model_Forest_26.score0(data,preds);
    titanic_model_Forest_27.score0(data,preds);
    titanic_model_Forest_28.score0(data,preds);
    titanic_model_Forest_29.score0(data,preds);
    titanic_model_Forest_30.score0(data,preds);
    titanic_model_Forest_31.score0(data,preds);
    titanic_model_Forest_32.score0(data,preds);
    titanic_model_Forest_33.score0(data,preds);
    titanic_model_Forest_34.score0(data,preds);
    titanic_model_Forest_35.score0(data,preds);
    titanic_model_Forest_36.score0(data,preds);
    titanic_model_Forest_37.score0(data,preds);
    titanic_model_Forest_38.score0(data,preds);
    titanic_model_Forest_39.score0(data,preds);
    titanic_model_Forest_40.score0(data,preds);
    titanic_model_Forest_41.score0(data,preds);
    titanic_model_Forest_42.score0(data,preds);
    titanic_model_Forest_43.score0(data,preds);
    titanic_model_Forest_44.score0(data,preds);
    titanic_model_Forest_45.score0(data,preds);
    titanic_model_Forest_46.score0(data,preds);
    titanic_model_Forest_47.score0(data,preds);
    titanic_model_Forest_48.score0(data,preds);
    titanic_model_Forest_49.score0(data,preds);
    preds[2] = preds[1] + -0.4513285249013456;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5380312170706447);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_titanic_model implements java.io.Serializable {
  public static final String[] VALUES = new String[8];
  static {
    NamesHolder_titanic_model_0.fill(VALUES);
  }
  static final class NamesHolder_titanic_model_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Sex";
      sa[1] = "Age";
      sa[2] = "SibSp";
      sa[3] = "Parch";
      sa[4] = "Ticket";
      sa[5] = "Fare";
      sa[6] = "Cabin";
      sa[7] = "Embarked";
    }
  }
}
// The class representing column Sex
class titanic_model_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    titanic_model_ColInfo_0_0.fill(VALUES);
  }
  static final class titanic_model_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "female";
      sa[1] = "male";
    }
  }
}
// The class representing column Cabin
class titanic_model_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[134];
  static {
    titanic_model_ColInfo_6_0.fill(VALUES);
  }
  static final class titanic_model_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "A10";
      sa[1] = "A14";
      sa[2] = "A16";
      sa[3] = "A19";
      sa[4] = "A23";
      sa[5] = "A24";
      sa[6] = "A26";
      sa[7] = "A31";
      sa[8] = "A32";
      sa[9] = "A34";
      sa[10] = "A36";
      sa[11] = "A5";
      sa[12] = "A6";
      sa[13] = "A7";
      sa[14] = "B101";
      sa[15] = "B102";
      sa[16] = "B18";
      sa[17] = "B19";
      sa[18] = "B20";
      sa[19] = "B22";
      sa[20] = "B28";
      sa[21] = "B3";
      sa[22] = "B35";
      sa[23] = "B37";
      sa[24] = "B38";
      sa[25] = "B4";
      sa[26] = "B41";
      sa[27] = "B42";
      sa[28] = "B49";
      sa[29] = "B5";
      sa[30] = "B50";
      sa[31] = "B51 B53 B55";
      sa[32] = "B57 B59 B63 B66";
      sa[33] = "B58 B60";
      sa[34] = "B73";
      sa[35] = "B77";
      sa[36] = "B78";
      sa[37] = "B79";
      sa[38] = "B82 B84";
      sa[39] = "B86";
      sa[40] = "B94";
      sa[41] = "B96 B98";
      sa[42] = "C101";
      sa[43] = "C103";
      sa[44] = "C104";
      sa[45] = "C106";
      sa[46] = "C110";
      sa[47] = "C111";
      sa[48] = "C123";
      sa[49] = "C124";
      sa[50] = "C126";
      sa[51] = "C128";
      sa[52] = "C2";
      sa[53] = "C22 C26";
      sa[54] = "C23 C25 C27";
      sa[55] = "C30";
      sa[56] = "C32";
      sa[57] = "C45";
      sa[58] = "C46";
      sa[59] = "C47";
      sa[60] = "C49";
      sa[61] = "C50";
      sa[62] = "C52";
      sa[63] = "C54";
      sa[64] = "C62 C64";
      sa[65] = "C65";
      sa[66] = "C68";
      sa[67] = "C7";
      sa[68] = "C70";
      sa[69] = "C78";
      sa[70] = "C82";
      sa[71] = "C83";
      sa[72] = "C85";
      sa[73] = "C86";
      sa[74] = "C90";
      sa[75] = "C91";
      sa[76] = "C92";
      sa[77] = "C93";
      sa[78] = "C95";
      sa[79] = "C99";
      sa[80] = "D";
      sa[81] = "D10 D12";
      sa[82] = "D11";
      sa[83] = "D15";
      sa[84] = "D17";
      sa[85] = "D19";
      sa[86] = "D20";
      sa[87] = "D21";
      sa[88] = "D26";
      sa[89] = "D30";
      sa[90] = "D33";
      sa[91] = "D35";
      sa[92] = "D36";
      sa[93] = "D37";
      sa[94] = "D45";
      sa[95] = "D46";
      sa[96] = "D47";
      sa[97] = "D48";
      sa[98] = "D49";
      sa[99] = "D50";
      sa[100] = "D56";
      sa[101] = "D7";
      sa[102] = "D9";
      sa[103] = "E10";
      sa[104] = "E101";
      sa[105] = "E121";
      sa[106] = "E17";
      sa[107] = "E24";
      sa[108] = "E25";
      sa[109] = "E31";
      sa[110] = "E33";
      sa[111] = "E34";
      sa[112] = "E36";
      sa[113] = "E38";
      sa[114] = "E40";
      sa[115] = "E44";
      sa[116] = "E46";
      sa[117] = "E49";
      sa[118] = "E50";
      sa[119] = "E58";
      sa[120] = "E63";
      sa[121] = "E67";
      sa[122] = "E68";
      sa[123] = "E77";
      sa[124] = "E8";
      sa[125] = "F E69";
      sa[126] = "F G63";
      sa[127] = "F G73";
      sa[128] = "F2";
      sa[129] = "F33";
      sa[130] = "F38";
      sa[131] = "F4";
      sa[132] = "G6";
      sa[133] = "T";
    }
  }
}
// The class representing column Embarked
class titanic_model_ColInfo_7 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    titanic_model_ColInfo_7_0.fill(VALUES);
  }
  static final class titanic_model_ColInfo_7_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C";
      sa[1] = "Q";
      sa[2] = "S";
    }
  }
}
// The class representing column Survived
class titanic_model_ColInfo_8 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    titanic_model_ColInfo_8_0.fill(VALUES);
  }
  static final class titanic_model_ColInfo_8_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class titanic_model_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_0_class_0.score0(fdata);
  }
}
class titanic_model_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <3.5285938f ? 
                0.17289613f : 
                 (data[4 /* Ticket */] <24916.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <3153.5f ? 
                        -0.019748362f : 
                        -0.1474967f) : 
                     (data[1 /* Age */] <9.46875f ? 
                        -0.0106898425f : 
                        -0.12768754f))) : 
            0.25703973f) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.5f ? 
                 (data[4 /* Ticket */] <281022.5f ? 
                     (data[4 /* Ticket */] <15675.5f ? 
                        0.08294956f : 
                        0.21130951f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <41.601562f ? 
                        0.104051396f : 
                        -0.037462797f)) : 
                -0.070185296f) : 
            0.25703973f));
    return pred;
  } // constant pool size = 87B, number of visited nodes = 11, static init size = 246B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100010 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, 68, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
}


class titanic_model_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_1_class_0.score0(fdata);
  }
}
class titanic_model_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <3.5285938f ? 
                0.15054521f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.15604496f : 
                        -0.15494567f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <56.036007f ? 
                        -0.10541258f : 
                        -0.013569165f))) : 
            0.22144471f) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.5f ? 
                 (data[4 /* Ticket */] <281022.5f ? 
                     (data[4 /* Ticket */] <15675.5f ? 
                        0.073342636f : 
                        0.18301986f) : 
                     (data[4 /* Ticket */] <369156.5f ? 
                        0.030906921f : 
                        0.11559382f)) : 
                -0.06429108f) : 
            0.22144471f));
    return pred;
  } // constant pool size = 123B, number of visited nodes = 11, static init size = 462B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100010 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, 68, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {10000000 00000100 00000001 00000000 00000000 00000000 00000000 00100000 00100100 00000000 00000000 00000000 00000000 00000000 01011001 00000000 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 32, -128, 0, 0, 0, 0, 4, 36, 0, 0, 0, 0, 0, -102, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
}


class titanic_model_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_2_class_0.score0(fdata);
  }
}
class titanic_model_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <9.434922f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                    0.23537141f : 
                    -0.12427614f) : 
                 (data[4 /* Ticket */] <24916.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <3153.5f ? 
                        -0.00463546f : 
                        -0.1310516f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        -0.09863274f : 
                        -0.1319727f))) : 
             (data[5 /* Fare */] <30.019289f ? 
                0.16999632f : 
                 (Double.isNaN(data[3]) || data[3 /* Parch */] <0.5f ? 
                    0.19732095f : 
                    0.20504822f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.5f ? 
                 (data[4 /* Ticket */] <281022.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.16876891f : 
                        0.066676505f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <38.683594f ? 
                        0.08476549f : 
                        -0.03178638f)) : 
                -0.05893034f) : 
            0.19732095f));
    return pred;
  } // constant pool size = 99B, number of visited nodes = 14, static init size = 246B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100011 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, -60, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
}


class titanic_model_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_3_class_0.score0(fdata);
  }
}
class titanic_model_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <3.5285938f ? 
                0.120822355f : 
                 (data[1 /* Age */] <32.157604f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.837717f ? 
                        -0.08525009f : 
                        0.041280713f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <56.036007f ? 
                        -0.11588098f : 
                        -0.062963165f))) : 
             (data[5 /* Fare */] <30.019289f ? 
                0.18210655f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 128, 4, data[6])) ? 
                    0.17933998f : 
                    0.1798934f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.5f ? 
                 (data[4 /* Ticket */] <281022.5f ? 
                     (data[4 /* Ticket */] <15675.5f ? 
                        0.052416604f : 
                        0.14963199f) : 
                     (data[4 /* Ticket */] <369156.5f ? 
                        0.019512692f : 
                        0.0954702f)) : 
                -0.054029394f) : 
            0.1798934f));
    return pred;
  } // constant pool size = 112B, number of visited nodes = 13, static init size = 348B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100010 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, 68, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {...4 0-bits... 11011011 11111111 11111101 11111111 11111011 11111111 10111111 11111111 01111111 11111011 11111110 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-37, -1, -65, -1, -33, -1, -3, -1, -2, -33, 127, -1, -1, -1, -1, 127};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
}


class titanic_model_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_4_class_0.score0(fdata);
  }
}
class titanic_model_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <9.434922f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                    0.20533948f : 
                    -0.11547669f) : 
                 (data[4 /* Ticket */] <24916.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        -0.09510408f : 
                        0.02556323f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        -0.08587332f : 
                        -0.120212615f))) : 
             (data[5 /* Fare */] <30.019289f ? 
                0.14190802f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(128, 4, data[6]) || (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 128, 4, data[6])) ? 
                    0.16647151f : 
                    0.1756818f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.5f ? 
                 (data[1 /* Age */] <7.801758f ? 
                    0.15330474f : 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.09129408f : 
                        0.03214138f)) : 
                -0.049531788f) : 
            0.1667397f));
    return pred;
  } // constant pool size = 112B, number of visited nodes = 13, static init size = 348B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100011 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, -60, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {...4 0-bits... 00100000 00000000 00000000 00010000 00000000 00000000 00000000 00100000 00000000 11000000 01000010 00000010 00000000 00000000 00100000 1000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 8, 0, 0, 0, 4, 0, 3, 66, 64, 0, 0, 4, 1};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
}


class titanic_model_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_5_class_0.score0(fdata);
  }
}
class titanic_model_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <9.434922f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                    0.1866793f : 
                    -0.107713826f) : 
                 (data[4 /* Ticket */] <24916.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <3153.5f ? 
                        0.004024319f : 
                        -0.11795814f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <23.0f ? 
                        -0.108646885f : 
                        -0.08301468f))) : 
             (data[5 /* Fare */] <30.019289f ? 
                0.15938273f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(128, 4, data[6]) || (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 128, 4, data[6])) ? 
                    0.15603466f : 
                    0.15638396f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <365751.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <340219.5f ? 
                        0.08274389f : 
                        -0.028596146f) : 
                    0.14550401f) : 
                -0.045393452f) : 
            0.1564898f));
    return pred;
  } // constant pool size = 112B, number of visited nodes = 13, static init size = 348B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100010 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, 68, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {...4 0-bits... 00010000 10100000 00000000 00100000 00000000 11000010 00000000 00000000 00000000 00000100 00000001 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 5, 0, 4, 0, 67, 0, 0, 0, 32, -128, 0, 0, 0, 0, -128};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
}


class titanic_model_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_6_class_0.score0(fdata);
  }
}
class titanic_model_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <9.434922f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                    0.17259707f : 
                    -0.100767024f) : 
                 (data[4 /* Ticket */] <24916.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        -0.08673301f : 
                        0.027888132f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <14.220312f ? 
                        -0.076744854f : 
                        -0.11432254f))) : 
             (data[1 /* Age */] <33.526524f ? 
                0.1255447f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(128, 4, data[6]) || (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 128, 4, data[6])) ? 
                    0.14805317f : 
                    0.16036505f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.5f ? 
                 (data[4 /* Ticket */] <281022.5f ? 
                     (data[4 /* Ticket */] <15675.5f ? 
                        0.03084382f : 
                        0.123716325f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <38.683594f ? 
                        0.05583358f : 
                        -0.049767446f)) : 
                -0.041579213f) : 
            0.14830671f));
    return pred;
  } // constant pool size = 116B, number of visited nodes = 14, static init size = 348B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100011 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, -60, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {...4 0-bits... 10000000 00000000 00000000 00010000 00000000 00000010 00000001 00000000 00000000 00000000 00000000 00100000 10000011 10000000 00000000 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 8, 0, 64, -128, 0, 0, 0, 0, 4, -63, 1, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
}


class titanic_model_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_7_class_0.score0(fdata);
  }
}
class titanic_model_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <9.434922f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                    0.16160998f : 
                    -0.09445792f) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.13476205f : 
                        -0.12813686f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <56.036007f ? 
                        -0.07296186f : 
                        0.021857383f))) : 
             (data[5 /* Fare */] <30.019289f ? 
                0.14355253f : 
                 (data[1 /* Age */] <33.664062f ? 
                    0.14236005f : 
                    0.14142074f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <281022.5f ? 
                     (data[1 /* Age */] <36.359375f ? 
                        0.13845411f : 
                        0.06723335f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <22.796875f ? 
                        0.043388408f : 
                        -0.06978973f)) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <26834.5f ? 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[7])) ? 
                        -0.0877618f : 
                        0.07466869f) : 
                     (data[1 /* Age */] <32.367188f ? 
                        -4.2612606E-5f : 
                        0.14625633f))) : 
            0.14164843f));
    return pred;
  } // constant pool size = 152B, number of visited nodes = 17, static init size = 492B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100010 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, 68, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {01111011 11111011 11111110 11111111 11111111 11111111 11111111 11011111 11011011 11111111 11111111 11111111 11111111 11111111 10100110 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-34, -33, 127, -1, -1, -1, -1, -5, -37, -1, -1, -1, -1, -1, 101, -1, 63};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_8_class_0.score0(fdata);
  }
}
class titanic_model_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <9.434922f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                    0.15282027f : 
                    -0.08865656f) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.13038124f : 
                        -0.12475485f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <56.036007f ? 
                        -0.068339914f : 
                        0.019491283f))) : 
             (data[5 /* Fare */] <30.019289f ? 
                0.13772902f : 
                 (data[1 /* Age */] <33.664062f ? 
                    0.13673927f : 
                    0.13595837f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <281022.5f ? 
                     (data[1 /* Age */] <36.359375f ? 
                        0.12842445f : 
                        0.061051313f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <22.796875f ? 
                        0.03909423f : 
                        -0.06313257f)) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <26834.5f ? 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[7])) ? 
                        -0.07977952f : 
                        0.06736449f) : 
                     (data[1 /* Age */] <32.367188f ? 
                        -3.835289E-5f : 
                        0.13352135f))) : 
            0.13614777f));
    return pred;
  } // constant pool size = 152B, number of visited nodes = 17, static init size = 492B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100010 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, 68, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {01111011 11111011 11111110 11111111 11111111 11111111 11111111 11011111 11011011 11111111 11111111 11111111 11111111 11111111 10100110 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-34, -33, 127, -1, -1, -1, -1, -5, -37, -1, -1, -1, -1, -1, 101, -1, 63};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_9_class_0.score0(fdata);
  }
}
class titanic_model_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <13.009805f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                    0.13538536f : 
                    -0.08937363f) : 
                 (data[1 /* Age */] <32.06924f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.798748f ? 
                        -0.061479583f : 
                        0.07652384f) : 
                     (data[4 /* Ticket */] <242927.5f ? 
                        -0.059252992f : 
                        -0.10051294f))) : 
             (data[5 /* Fare */] <30.019289f ? 
                0.10128633f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(128, 4, data[6]) || (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 128, 4, data[6])) ? 
                    0.13146347f : 
                    0.14313458f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
             (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <16.584688f ? 
                     (data[1 /* Age */] <7.453035f ? 
                        0.03264014f : 
                        -0.102880254f) : 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.07820312f : 
                        0.014700542f)) : 
                 (data[1 /* Age */] <14.097813f ? 
                    0.13703912f : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <12.979688f ? 
                        0.09157072f : 
                        0.024431195f))) : 
            0.13154666f));
    return pred;
  } // constant pool size = 129B, number of visited nodes = 16, static init size = 378B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100011 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, -60, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {...4 0-bits... 00000100 10000000 00000000 00110000 00000000 00000000 01000000 00000000 10000000 00000100 00000000 00000000 00000000 00000000 00100000 1000}
  public static final byte[] GRPSPLIT2 = new byte[] {32, 1, 0, 12, 0, 0, 2, 0, 1, 32, 0, 0, 0, 0, 4, -127};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {3, 0, 0, 0};
}


class titanic_model_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_10_class_0.score0(fdata);
  }
}
class titanic_model_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <3.5285938f ? 
                0.08481568f : 
                 (data[1 /* Age */] <32.157604f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.837717f ? 
                        -0.052038837f : 
                        0.066464424f) : 
                     (data[1 /* Age */] <41.637524f ? 
                        -0.10740959f : 
                        -0.06793651f))) : 
             (data[5 /* Fare */] <30.019289f ? 
                0.12970859f : 
                 (data[1 /* Age */] <35.5175f ? 
                    0.12781818f : 
                    0.12750778f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
             (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <29.375f ? 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.05435177f : 
                        0.008164244f) : 
                    0.16451344f) : 
                 (data[1 /* Age */] <38.44043f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <29.244335f ? 
                        0.10379082f : 
                        -0.039901767f) : 
                    -0.11462967f)) : 
            0.12765816f));
    return pred;
  } // constant pool size = 99B, number of visited nodes = 14, static init size = 246B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100010 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, 68, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
}


class titanic_model_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_11_class_0.score0(fdata);
  }
}
class titanic_model_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[4 /* Ticket */] <12804.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                     (data[1 /* Age */] <22.275625f ? 
                        -0.013655029f : 
                        -0.07957594f) : 
                    0.10635311f) : 
                 (data[1 /* Age */] <9.330078f ? 
                     (data[2 /* SibSp */] <2.0f ? 
                        0.14171717f : 
                        -0.0784974f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        -0.0518283f : 
                        -0.096362084f))) : 
             (data[1 /* Age */] <33.526524f ? 
                0.09666412f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(128, 4, data[6]) || (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 128, 4, data[6])) ? 
                    0.12421415f : 
                    0.13835724f))) : 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
            -0.07904166f : 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <279263.0f ? 
                 (data[4 /* Ticket */] <9109.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <3487.0f ? 
                        0.03910857f : 
                        -0.11408677f) : 
                     (data[4 /* Ticket */] <235559.5f ? 
                        0.13240516f : 
                        0.062332794f)) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <367451.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <17.721386f ? 
                        0.012109808f : 
                        -0.08297879f) : 
                    0.12158256f))));
    return pred;
  } // constant pool size = 128B, number of visited nodes = 17, static init size = 348B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100011 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, -60, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {...4 0-bits... 10000000 00000000 00000000 00010000 00000000 01000000 00000001 00000000 00000000 00000000 00000000 00100000 10000011 10000000 00000000 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 8, 0, 2, -128, 0, 0, 0, 0, 4, -63, 1, 0, 0};
  // {11011111 11111111 01011111 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT3 = new byte[] {-5, -1, -6, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
}


class titanic_model_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_12_class_0.score0(fdata);
  }
}
class titanic_model_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[1 /* Age */] <3.5285938f ? 
                0.07777196f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.12233792f : 
                        -0.11724659f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <56.036007f ? 
                        -0.05013475f : 
                        0.028914364f))) : 
             (data[5 /* Fare */] <30.019289f ? 
                0.12300744f : 
                 (data[1 /* Age */] <33.664062f ? 
                    0.12223413f : 
                    0.1213743f))) : 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
            -0.07872829f : 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <279263.0f ? 
                 (data[4 /* Ticket */] <9109.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <3487.0f ? 
                        0.03546234f : 
                        -0.103666455f) : 
                     (data[4 /* Ticket */] <235559.5f ? 
                        0.12785286f : 
                        0.057017468f)) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <367451.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <17.721386f ? 
                        0.010904345f : 
                        -0.076154165f) : 
                    0.111478716f))));
    return pred;
  } // constant pool size = 139B, number of visited nodes = 15, static init size = 462B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100010 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, 68, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {01111011 11111011 11111110 11111111 11111111 11111111 11111111 11011111 11011011 11111111 11111111 11111111 11111111 11111111 10100110 11111110 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-34, -33, 127, -1, -1, -1, -1, -5, -37, -1, -1, -1, -1, -1, 101, 127, 63};
  // {11111111 11111111 11110011 11101111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 111101}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -49, -9, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, -1, -9, 47};
}


class titanic_model_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_13_class_0.score0(fdata);
  }
}
class titanic_model_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <13.009805f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                    0.12257558f : 
                    -0.08047083f) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.119771816f : 
                        -0.11533945f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <56.036007f ? 
                        -0.049390744f : 
                        0.025708375f))) : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                -0.077983536f : 
                 (data[1 /* Age */] <5.39375f ? 
                    0.12313892f : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <12.144483f ? 
                        -0.014781915f : 
                        0.040934652f)))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                 (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                    0.11876521f : 
                    0.11908914f) : 
                0.11989923f) : 
             (data[4 /* Ticket */] <321654.0f ? 
                0.12292803f : 
                0.12159094f)));
    return pred;
  } // constant pool size = 176B, number of visited nodes = 14, static init size = 708B
  // {00101011 01001010 10101110 01111110 11111100 01111100 00100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 117, 126, 63, 62, 68, -21, 25, -75, -2, 124, -11, -33, 101, 52, 10};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {01111011 11111011 11111110 11111111 11111111 11111111 11111111 11011111 11011011 11111111 11111111 11111111 11111111 11111111 10100110 11111110 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-34, -33, 127, -1, -1, -1, -1, -5, -37, -1, -1, -1, -1, -1, 101, 127, 63};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
  // {00100000 00000000 10101110 01010000 11001000 00000000 00000000 11000000 10000000 10100001 00000000 00000000 00000001 01000000 10000100 00000100 010000}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 0, 117, 10, 19, 0, 0, 3, 1, -123, 0, 0, -128, 2, 33, 32, 2};
  // {00001000 01001000 00000000 00000010 00000000 00000000 00000000 00010010 00001000 00000000 01000000 00100010 00101000 00111000 00000010 00000000 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {16, 18, 0, 64, 0, 0, 0, 72, 16, 0, 2, 68, 20, 28, 64, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
}


class titanic_model_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_14_class_0.score0(fdata);
  }
}
class titanic_model_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[4 /* Ticket */] <12804.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <12.007715f ? 
                     (data[1 /* Age */] <22.275625f ? 
                        0.02363983f : 
                        -0.07542152f) : 
                    0.089945436f) : 
                 (data[1 /* Age */] <9.330078f ? 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                        0.13226542f : 
                        -0.069438025f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <23.476624f ? 
                        -0.080457665f : 
                        -0.043875866f))) : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                -0.06895434f : 
                 (data[1 /* Age */] <5.39375f ? 
                    0.11201123f : 
                     (data[1 /* Age */] <13.494629f ? 
                        -0.07384063f : 
                        0.029118128f)))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                 (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                    0.11666381f : 
                    0.11694612f) : 
                0.1176514f) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                0.11911758f : 
                0.12027854f)));
    return pred;
  } // constant pool size = 162B, number of visited nodes = 15, static init size = 600B
  // {00101011 01001010 10101110 01111110 11111100 01111100 00100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 117, 126, 63, 62, 68, -21, 25, -75, -2, 124, -11, -33, 101, 52, 10};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
  // {00100000 00000000 10101110 01010000 11001000 00000000 00000000 11000000 10000000 10100001 00000000 00000000 00000001 01000000 10000100 00000100 010000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 117, 10, 19, 0, 0, 3, 1, -123, 0, 0, -128, 2, 33, 32, 2};
  // {00001000 01001000 00000000 00000010 00000000 00000000 00000000 00010010 00001000 00000000 01000000 00100010 00101000 00111000 00000010 00000000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {16, 18, 0, 64, 0, 0, 0, 72, 16, 0, 2, 68, 20, 28, 64, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 10101100 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000100 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 53, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 0};
}


class titanic_model_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_15_class_0.score0(fdata);
  }
}
class titanic_model_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <32.283085f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <30.665037f ? 
                     (data[1 /* Age */] <3.4917617f ? 
                        0.07498613f : 
                        -0.035253346f) : 
                    0.07552321f) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <315598.5f ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                        -0.11425525f : 
                        -0.029965283f) : 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                        -0.11797422f : 
                        -0.033319f))) : 
             (data[4 /* Ticket */] <12804.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <3501.0f ? 
                    0.022038318f : 
                    -0.09005565f) : 
                 (data[4 /* Ticket */] <278222.5f ? 
                     (data[4 /* Ticket */] <74104.5f ? 
                        0.1456908f : 
                        0.070114546f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <366444.5f ? 
                        -0.011786144f : 
                        0.113375925f)))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                 (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    0.11482887f : 
                    0.115075946f) : 
                0.11569268f) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                0.11696965f : 
                0.117982484f)));
    return pred;
  } // constant pool size = 175B, number of visited nodes = 17, static init size = 630B
  // {00101011 01001010 10101110 01111110 11111100 01111100 00100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 117, 126, 63, 62, 68, -21, 25, -75, -2, 124, -11, -33, 101, 52, 10};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 10101110 01010000 11001000 00000000 00000000 11000000 10000000 10100001 00000000 00000000 00000001 01000000 10000100 00000100 010000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 117, 10, 19, 0, 0, 3, 1, -123, 0, 0, -128, 2, 33, 32, 2};
  // {00001000 01001000 00000000 00000010 00000000 00000000 00000000 00010010 00001000 00000000 01000000 00100010 00101000 00111000 00000010 00000000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 18, 0, 64, 0, 0, 0, 72, 16, 0, 2, 68, 20, 28, 64, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {00100000 00000000 10101100 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000100 000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 53, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 0};
}


class titanic_model_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_16_class_0.score0(fdata);
  }
}
class titanic_model_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[4 /* Ticket */] <12804.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <8.170459f ? 
                        -0.018858489f : 
                        -0.09937957f) : 
                    0.091990955f) : 
                 (data[1 /* Age */] <32.036407f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        0.010397189f : 
                        -0.06360525f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <41.543785f ? 
                        -0.08585652f : 
                        -0.047001004f))) : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                -0.06594539f : 
                 (data[1 /* Age */] <5.39375f ? 
                    0.1019255f : 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.03997318f : 
                        -0.009085469f)))) : 
         (data[5 /* Fare */] <24.01543f ? 
            0.061797515f : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 130, 2, data[6])) ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 130, 2, data[6])) ? 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 130, 2, data[6])) ? 
                        0.1132846f : 
                        0.11397875f) : 
                    0.11510581f) : 
                0.13193691f)));
    return pred;
  } // constant pool size = 157B, number of visited nodes = 15, static init size = 570B
  // {00101011 01001010 10101110 01111111 11111100 01111100 00100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 117, -2, 63, 62, 68, -21, 25, -75, -2, 124, -11, -33, 101, 52, 10};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
  // {...2 0-bits... 10000000 00000010 10110000 01000100 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 64, 13, 34, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {...2 0-bits... 00000000 00000000 00001001 00000011 00100000 00000000 00000011 00000010 00000010 10000000 00000000 00000000 00000000 00000010 00010000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, -112, -64, 4, 0, -64, 64, 64, 1, 0, 0, 0, 64, 8, 0, 0};
  // {...2 0-bits... 00100001 00100000 00000000 00001000 00000000 00000000 00000000 01001000 00100000 00000001 00000000 10001000 10000000 11100000 00001000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-124, 4, 0, 16, 0, 0, 0, 18, 4, -128, 0, 17, 1, 7, 16, 0, 0};
}


class titanic_model_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_17_class_0.score0(fdata);
  }
}
class titanic_model_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <9.434922f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                    0.13017012f : 
                    -0.062286623f) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.11633267f : 
                        -0.111146085f) : 
                     (data[4 /* Ticket */] <170257.0f ? 
                        -0.001187155f : 
                        -0.043638855f))) : 
             (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <29.375f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <15.587891f ? 
                        0.0039580725f : 
                        0.051754642f) : 
                    0.13991247f) : 
                 (data[1 /* Age */] <38.44043f ? 
                     (data[1 /* Age */] <16.502678f ? 
                        -0.042208325f : 
                        0.08263292f) : 
                    -0.12569068f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                        0.11180465f : 
                        0.11185704f) : 
                    0.11204106f) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                    0.11236275f : 
                    0.11256032f)) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                0.113429666f : 
                0.114188164f)));
    return pred;
  } // constant pool size = 241B, number of visited nodes = 18, static init size = 1002B
  // {00101011 01001010 10101110 01111110 11111100 01111100 00100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 117, 126, 63, 62, 68, -21, 25, -75, -2, 124, -11, -33, 101, 52, 10};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11111011 11111011 11111110 11111111 11111111 11111111 11111111 11111111 11011011 11111111 11111111 11111111 11111111 11111111 10100110 11111110 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, -33, 127, -1, -1, -1, -1, -1, -37, -1, -1, -1, -1, -1, 101, 127, 63};
  // {00100000 00000000 10101110 01010000 11001000 00000000 00000000 11000000 10000000 10100001 00000000 00000000 00001001 01000000 10000100 00000100 010000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 0, 117, 10, 19, 0, 0, 3, 1, -123, 0, 0, -112, 2, 33, 32, 2};
  // {00001000 01001000 00000000 00000010 00000000 00000000 00000000 00010010 00001000 00000000 01000000 00100010 00100000 10111000 00000010 00000000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {16, 18, 0, 64, 0, 0, 0, 72, 16, 0, 2, 68, 4, 29, 64, 0, 0};
  // {00000001 00000010 00000000 00000000 00000000 01001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 000100}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 64, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 8};
  // {00000010 00000000 00000000 00100000 00000000 00000000 00100000 00000000 00000000 00001100 00000100 00010000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, 0, 0, 4, 0, 0, 4, 0, 0, 48, 32, 8, 0, 0, 0, 0, 0};
  // {00001000 00000000 00000000 00000000 00000000 00000000 00000000 00010010 00000000 00000000 00000000 00100010 00000000 00111000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 68, 0, 28, 0, 0, 0};
  // {00100000 00000000 10101100 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 01000000 00000000 00000100 010000}
  public static final byte[] GRPSPLIT9 = new byte[] {4, 0, 53, 8, 0, 0, 0, 0, 0, 0, 0, 0, -128, 2, 0, 32, 2};
}


class titanic_model_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_18_class_0.score0(fdata);
  }
}
class titanic_model_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[4 /* Ticket */] <12804.5f ? 
                 (data[4 /* Ticket */] <2680.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <9.752861f ? 
                        0.014421749f : 
                        0.12215359f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <24.759218f ? 
                        -0.12842132f : 
                        -0.0025164753f)) : 
                 (data[1 /* Age */] <9.330078f ? 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                        0.12738943f : 
                        -0.05822445f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        -0.02671666f : 
                        -0.07975232f))) : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                -0.066691324f : 
                 (data[1 /* Age */] <5.39375f ? 
                    0.09369655f : 
                     (Double.isNaN(data[3]) || data[3 /* Parch */] <0.5f ? 
                        0.02970672f : 
                        -0.018160446f)))) : 
         (data[4 /* Ticket */] <12804.5f ? 
            0.066930674f : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 130, 2, data[6])) ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 130, 2, data[6])) ? 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 130, 2, data[6])) ? 
                        0.11061521f : 
                        0.11114972f) : 
                    0.11205616f) : 
                0.12984549f)));
    return pred;
  } // constant pool size = 161B, number of visited nodes = 16, static init size = 570B
  // {00101011 01001010 10101110 01111111 11111100 01111100 00100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 117, -2, 63, 62, 68, -21, 25, -75, -2, 124, -11, -33, 101, 52, 10};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 01000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0};
  // {...2 0-bits... 00000000 00000010 10010000 01000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 00000000 00000000 00000001}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 64, 9, 34, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, -128, 0};
  // {...2 0-bits... 00000000 00000000 00101001 00000011 00100000 00000000 00000011 00000010 00000010 10000100 00000000 00000000 00100000 00000010 00010000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, -108, -64, 4, 0, -64, 64, 64, 33, 0, 0, 4, 64, 8, 0, 0};
  // {...2 0-bits... 00100001 00100000 00000000 00001000 00000000 00000000 00000000 00001000 00100000 00000001 00000000 10001000 10000010 11100000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-124, 4, 0, 16, 0, 0, 0, 16, 4, -128, 0, 17, 65, 7, 0, 0, 0};
}


class titanic_model_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_19_class_0.score0(fdata);
  }
}
class titanic_model_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                -0.14689867f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                    -0.110686384f : 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.10918185f : 
                        -0.108427964f))) : 
             (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (data[1 /* Age */] <32.127655f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.64136f ? 
                        -0.017618014f : 
                        0.081161365f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <56.036007f ? 
                        -0.05387812f : 
                        0.0770981f)) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <339821.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.06821565f : 
                        -0.007315681f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <1.7226562f ? 
                        0.0712633f : 
                        -0.032701507f)))) : 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
            0.036955673f : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        0.10944999f : 
                        0.10961758f) : 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                        0.1098942f : 
                        0.11007942f)) : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                    0.11070153f : 
                    0.11126796f))));
    return pred;
  } // constant pool size = 264B, number of visited nodes = 18, static init size = 1140B
  // {00101011 01001010 10111110 01111110 11111100 01111100 10101010 11010111 10011001 10101101 11111111 00111110 10101111 11111011 10100110 01101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, 126, 63, 62, 85, -21, -103, -75, -1, 124, -11, -33, 101, 54, 10};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 100010}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17};
  // {11111011 11111111 11111110 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11101110 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -1, 127, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, 127, 119, 63};
  // {01111111 11011010 11111111 11111111 11111110 01111110 11111111 11011111 11011001 11111111 11111111 11111111 11111111 11111111 10100111 11111101 110111}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 91, -1, -1, 127, 126, -1, -5, -101, -1, -1, -1, -1, -1, -27, -65, 59};
  // {01010000 10010000 00000000 00000000 00000000 00000000 01010000 00000000 00000000 00010010 00000000 00000000 00000000 00000000 00000000 10000000 000001}
  public static final byte[] GRPSPLIT4 = new byte[] {10, 9, 0, 0, 0, 0, 10, 0, 0, 72, 0, 0, 0, 0, 0, 1, 32};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 01110111 11111111 11111110 11111111 01111111 11111111 11111111 11111111 11111111 10111111 111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -9, -1, -1, -1, -18, -1, 127, -1, -2, -1, -1, -1, -1, -3, 63};
  // {00100000 00000000 10101110 01010000 11001000 00000000 00000000 11010000 10000000 10100001 00000000 00000000 00001001 01000000 10000100 00000100 010000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 117, 10, 19, 0, 0, 11, 1, -123, 0, 0, -112, 2, 33, 32, 2};
  // {00001000 01001000 00000000 00001010 00100000 00100000 00000000 00000111 00001000 00000000 01010100 00110010 10100000 10111000 00000010 00000000 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 18, 0, 80, 4, 4, 0, -32, 16, 0, 42, 76, 5, 29, 64, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00100010 00000000 00111000 00000010 00000000 000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 68, 0, 28, 64, 0, 0};
  // {00100000 00000000 10101100 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 01000000 00000000 00000100 010000}
  public static final byte[] GRPSPLIT11 = new byte[] {4, 0, 53, 8, 0, 0, 0, 0, 0, 0, 0, 0, -128, 2, 0, 32, 2};
}


class titanic_model_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_20_class_0.score0(fdata);
  }
}
class titanic_model_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                -0.13775496f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                    -0.10956718f : 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.10823311f : 
                        -0.107560754f))) : 
             (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                 (data[1 /* Age */] <3.5285938f ? 
                    0.07323498f : 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.5f ? 
                        -0.020741476f : 
                        -0.11635913f)) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <339821.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <13163.5f ? 
                        -0.0017959728f : 
                        0.08042059f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <1.7226562f ? 
                        0.065740556f : 
                        -0.02944922f)))) : 
         (!Double.isNaN(data[0 /* Sex */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                -0.0050524087f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                        0.10867874f : 
                        0.10889201f) : 
                    0.109279566f)) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                        0.108470276f : 
                        0.10886109f) : 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                        0.10960461f : 
                        0.109772444f)) : 
                0.11513322f)));
    return pred;
  } // constant pool size = 304B, number of visited nodes = 19, static init size = 1356B
  // {00101011 01001010 10111110 01111110 11111100 01111100 10101010 11010111 10011000 10101101 11111111 00111110 10101111 11111011 10100110 01101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, 126, 63, 62, 85, -21, 25, -75, -1, 124, -11, -33, 101, 54, 10};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 100010}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 17};
  // {11111011 11111111 11111110 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11101110 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -1, 127, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, 127, 119, 63};
  // {01111111 11011010 11111111 11111111 11111110 01111110 11111111 11011111 11011001 11111111 11111111 11111111 11111111 11111111 10100111 11111101 110111}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 91, -1, -1, 127, 126, -1, -5, -101, -1, -1, -1, -1, -1, -27, -65, 59};
  // {01010000 10010000 00000000 00000000 00000000 00000000 01010000 00000000 00000000 00010010 00000000 00000001 00010000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {10, 9, 0, 0, 0, 0, 10, 0, 0, 72, 0, -128, 8, 0, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111011 01010111 11111111 11111111 11110011 01111111 11011111 11111111 11111111 11111111 10111111 111111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -9, -1, -1, -33, -22, -1, -1, -49, -2, -5, -1, -1, -1, -3, 63};
  // {00001000 00000000 00000000 00000000 00000000 00000000 00000000 00010010 00000000 00000000 00000000 00000000 00001001 01001000 00000010 00000000 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, -112, 18, 64, 0, 0};
  // {11111100 10111101 11111111 11011111 11111111 10110111 11111111 11111111 11110111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT9 = new byte[] {63, -67, -1, -5, -1, -19, -1, -1, -17, -1, -3, -1, -1, -1, -1, -1, 63};
  // {00100000 00000000 00011000 00000000 00000000 00000000 10001000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 01000100 010000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 0, 24, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 0, 34, 2};
  // {00000000 00000000 10100110 01010000 11001000 00000000 00000000 11000000 10000000 10100001 00000000 00100000 00000000 00000000 10000100 00000000 000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 101, 10, 19, 0, 0, 3, 1, -123, 0, 4, 0, 0, 33, 0, 0};
  // {00000000 00000000 00000000 00001000 00100000 00100000 00000000 00000101 00000000 00000000 00010000 00010000 10000000 10000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 0, 16, 4, 4, 0, -96, 0, 0, 8, 8, 1, 1, 0, 0, 0};
  // {00000000 00000000 10100100 00010000 00000000 00000000 00000000 01000000 10000000 10100000 00000000 00100000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 37, 8, 0, 0, 0, 2, 1, 5, 0, 4, 0, 0, 0, 0, 0};
}


class titanic_model_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_21_class_0.score0(fdata);
  }
}
class titanic_model_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <9.434922f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.0f ? 
                    0.124626495f : 
                    -0.05199714f) : 
                 (data[1 /* Age */] <32.133583f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.750235f ? 
                        -0.025133176f : 
                        0.06772516f) : 
                     (data[1 /* Age */] <34.750233f ? 
                        -0.12007645f : 
                        -0.03973411f))) : 
             (data[4 /* Ticket */] <12804.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <3501.0f ? 
                    0.0105384905f : 
                    -0.09006483f) : 
                 (data[4 /* Ticket */] <278222.5f ? 
                     (data[4 /* Ticket */] <74104.5f ? 
                        0.13548112f : 
                        0.055013545f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <366444.5f ? 
                        -0.015901415f : 
                        0.099024005f)))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
             (Double.isNaN(data[1]) || data[1 /* Age */] <36.479687f ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(128, 4, data[6]) || (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 128, 4, data[6])) ? 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(128, 4, data[6]) || (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 128, 4, data[6])) ? 
                        0.10765524f : 
                        0.10793288f) : 
                    0.10959318f) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 128, 4, data[6])) ? 
                    0.08381901f : 
                    0.1079531f)) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                    0.108503774f : 
                    0.10862169f) : 
                0.10901096f)));
    return pred;
  } // constant pool size = 206B, number of visited nodes = 19, static init size = 768B
  // {00101011 01001010 10101110 01111110 11111100 01111100 10100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 117, 126, 63, 62, 69, -21, 25, -75, -2, 124, -11, -33, 101, 52, 10};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 10101110 01010000 11001000 00000100 00000000 11010000 10000000 10101001 00000000 00100000 00001001 01000000 10000110 00000100 010000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 117, 10, 19, 32, 0, 11, 1, -107, 0, 4, -112, 2, 97, 32, 2};
  // {...4 0-bits... 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00100000 00000000 00000000 00000000 00100000 00001001 10000000 00000000 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 16, 0, 4, 0, 0, 0, 4, -112, 1, 0, 0};
  // {...4 0-bits... 00000100 10000000 00000000 10100010 00000000 00000000 00000000 00010000 10000000 00000101 00000000 00001010 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {32, 1, 0, 69, 0, 0, 0, 8, 1, -96, 0, 80, 0, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111110 11110111 11111111 11111111 11111111 11111101 01011111 10111111 10111111 11101111 11111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, 127, -17, -1, -1, -1, -65, -6, -3, -3, -9, -1, -1};
  // {00100000 00000000 10101100 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 01000000 00000000 00000100 010000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 53, 8, 0, 0, 0, 0, 0, 0, 0, 0, -128, 2, 0, 32, 2};
  // {11111111 11111111 11111111 11111111 11111111 11111011 11111111 11101111 11111111 11110110 11111111 11011111 11110111 11111111 01111001 11111111 111111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -1, -33, -1, -9, -1, 111, -1, -5, -17, -1, -98, -1, 63};
}


class titanic_model_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_22_class_0.score0(fdata);
  }
}
class titanic_model_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                -0.13253036f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                    -0.10826022f : 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.107127644f : 
                        -0.10652437f))) : 
             (data[1 /* Age */] <5.39375f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <2.498872f ? 
                    0.0074948897f : 
                    0.124051124f) : 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <4.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <53.32617f ? 
                        -0.0104316f : 
                        0.07963883f) : 
                    -0.12309763f))) : 
         (data[5 /* Fare */] <13.008359f ? 
            0.015582303f : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 130, 2, data[6])) ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <52.535156f ? 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(128, 4, data[6]) || (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 128, 4, data[6])) ? 
                        0.10704527f : 
                        0.10849939f) : 
                    0.080789424f) : 
                0.1281792f)));
    return pred;
  } // constant pool size = 179B, number of visited nodes = 13, static init size = 750B
  // {00101011 01001010 10111110 01111111 11111100 01111100 00100010 11010111 10011000 10101101 11111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, -2, 63, 62, 68, -21, 25, -75, -1, 124, -11, -33, 101, 52, 10};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10001000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 01000000 100010}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 17, 0, -128, 0, 0, 0, 0, 0, 0, 2, 17};
  // {11111011 11111111 11111110 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11101110 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -1, 127, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, 127, 119, 63};
  // {01111111 11011010 11111111 11111111 11111110 01111110 11111111 11011111 11011001 11111111 11111111 11111111 11111111 11111111 10100111 11111101 110111}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 91, -1, -1, 127, 126, -1, -5, -101, -1, -1, -1, -1, -1, -27, -65, 59};
  // {01010000 10010000 00000000 00000000 00000000 00000010 01010001 00000000 00000000 00010010 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {10, 9, 0, 0, 0, 64, -118, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0};
  // {...2 0-bits... 10000000 00000010 10100000 01000100 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00010000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 64, 5, 34, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 8, 0};
  // {...4 0-bits... 00000000 00000001 01100100 00001100 10000000 01000000 00001100 00001000 00001010 10010000 00000010 00000000 00000000 00001000 01000000 0000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, -128, 38, 48, 1, 2, 48, 16, 80, 9, 64, 0, 0, 16, 2, 0};
}


class titanic_model_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_23_class_0.score0(fdata);
  }
}
class titanic_model_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (data[4 /* Ticket */] <12804.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <8.170459f ? 
                        -0.0058336854f : 
                        -0.09655701f) : 
                    0.08190268f) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <26.663086f ? 
                     (data[1 /* Age */] <32.841873f ? 
                        0.0040921066f : 
                        -0.050759766f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <98.84784f ? 
                        -0.091726474f : 
                        0.0020399417f))) : 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <78.05015f ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(128, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 128, 4, data[6])) ? 
                    0.023579618f : 
                    0.10680271f) : 
                0.12653375f)) : 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
            -0.07617736f : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <49.53578f ? 
                 (data[1 /* Age */] <36.577057f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <293126.5f ? 
                        0.065087885f : 
                        -0.014084485f) : 
                     (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                        -0.065277174f : 
                        0.031274036f)) : 
                0.14208679f)));
    return pred;
  } // constant pool size = 125B, number of visited nodes = 15, static init size = 378B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100011 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, -60, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {...4 0-bits... 11001111 01111111 11111111 11001111 11111111 01111111 11111111 11111111 11111111 11111011 11111111 11111101 11111111 11111111 11111111 0111}
  public static final byte[] GRPSPLIT2 = new byte[] {-13, -2, -1, -13, -1, -2, -1, -1, -1, -33, -1, -65, -1, -1, -1, 126};
  // {11111111 11111111 11111111 11111111 11111111 10111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11100111 111001}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -3, -33, -17, -1, -1, -1, -1, -1, -1, -5, -25, 39};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {3, 0, 0, 0};
}


class titanic_model_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_24_class_0.score0(fdata);
  }
}
class titanic_model_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (data[1 /* Age */] <5.4714646f ? 
             (data[5 /* Fare */] <20.01286f ? 
                0.13491583f : 
                0.005253861f) : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                -0.13277255f : 
                 (data[1 /* Age */] <11.628325f ? 
                    -0.07410881f : 
                     (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                        -0.022847345f : 
                        0.014863987f)))) : 
         (data[1 /* Age */] <17.517265f ? 
            0.025113128f : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(131, 2, data[6]) || (GenModel.bitSetIsInRange(131, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 131, 2, data[6])) ? 
                 (!Double.isNaN(data[0 /* Sex */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(131, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 131, 2, data[6])) ? 
                        0.047938854f : 
                        0.106118105f) : 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(131, 2, data[6]) || (GenModel.bitSetIsInRange(131, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 131, 2, data[6])) ? 
                        0.10608671f : 
                        0.1090254f)) : 
                0.12940745f)));
    return pred;
  } // constant pool size = 146B, number of visited nodes = 11, static init size = 600B
  // {00101011 01001010 10101110 01111110 11111100 01111100 10100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 01101100 010110}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 117, 126, 63, 62, 69, -21, 25, -75, -2, 124, -11, -33, 101, 54, 26};
  // {11111011 11111111 11111110 11111111 11111111 11111111 11111011 11110111 11011011 11111111 11111111 11111111 11111111 11111111 11111110 11101110 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, -1, 127, -1, -1, -1, -33, -17, -37, -1, -1, -1, -1, -1, 127, 119, 63};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {...2 0-bits... 10000000 00000010 00010001 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00010001 0}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 64, -120, 0, 4, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, -120, 4};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {...2 0-bits... 11111111 11110111 11111111 01111111 11111110 11111101 11111111 11111111 11111111 11111111 11101111 10110111 11111111 11011111 11111110 11111111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -17, -1, -2, 127, -65, -1, -1, -1, -1, -9, -19, -1, -5, 127, -1, 7};
  // {...2 0-bits... 00000000 00000000 00000000 00000000 00000000 00000010 00000001 00000000 00000010 00000000 00100000 11000000 00000010 00000000 00010001 00000000 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 64, -128, 0, 64, 0, 4, 3, 64, 0, -120, 0, 0};
}


class titanic_model_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_25_class_0.score0(fdata);
  }
}
class titanic_model_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                -0.12008118f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                    -0.106645525f : 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.10571737f : 
                        -0.105355665f))) : 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <76.04887f ? 
                 (data[1 /* Age */] <5.306172f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <2.4813538f ? 
                        0.0015614466f : 
                        0.11357817f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <67.75781f ? 
                        -0.006020114f : 
                        -0.10639264f)) : 
                0.094346896f)) : 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
             (Double.isNaN(data[1]) || data[1 /* Age */] <35.547108f ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(119, 4, data[6]) || (GenModel.bitSetIsInRange(119, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 119, 4, data[6])) ? 
                    0.10523797f : 
                    0.106995955f) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(119, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 119, 4, data[6])) ? 
                    0.075239174f : 
                    0.10546397f)) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* Sex */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                    0.10559877f : 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                        0.10585381f : 
                        0.10606858f)) : 
                0.106416024f)));
    return pred;
  } // constant pool size = 247B, number of visited nodes = 16, static init size = 1086B
  // {00101011 01001010 10101110 01111110 11111100 01111100 00100010 11010111 10011000 10101101 11111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 117, 126, 63, 62, 68, -21, 25, -75, -1, 124, -11, -33, 101, 52, 10};
  // {00000000 00000000 00010000 00000001 00000000 00000000 10001000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 01000000 100010}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 8, -128, 0, 0, 17, 0, -128, 0, 0, 0, 0, 0, 0, 2, 17};
  // {11111011 11111111 11111110 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11101110 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -1, 127, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, 127, 119, 63};
  // {01111111 11011010 11111111 11111111 11111110 01111110 11111111 11011111 10011001 10111111 11111111 11111111 10111111 11111111 10100111 11111101 110111}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, 91, -1, -1, 127, 126, -1, -5, -103, -3, -1, -1, -3, -1, -27, -65, 59};
  // {01010000 10010000 01000000 00000000 00000000 00000010 01010001 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {10, 9, 2, 0, 0, 64, -118, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0};
  // {00100000 00001000 10101110 01010010 10001100 01000000 00100000 11000000 10000000 10100001 01001001 00110000 00101001 11000000 10100100 00001100 010100}
  public static final byte[] GRPSPLIT5 = new byte[] {4, 16, 117, 74, 49, 2, 4, 3, 1, -123, -110, 12, -108, 3, 37, 48, 10};
  // {...4 0-bits... 00000100 00000000 00000000 00000000 00000000 01000000 00000001 00000000 10000000 00001001 00000000 00101000 00000000 00100000 000}
  public static final byte[] GRPSPLIT6 = new byte[] {32, 0, 0, 0, 0, 2, -128, 0, 1, -112, 0, 20, 0, 4, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111100 11111111 11111111 10111111 11111111 11110101 11011111 10111111 10111101 11111111 111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, 63, -1, -1, -3, -1, -81, -5, -3, -67, -1, 127};
  // {00100000 00000000 10100100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 01000000 00000000 00000100 010100}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 2, 0, 32, 10};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 01000000 00000000 01000000 00000000 10000000 00001000 00110000 00000000 10000000 00000100 00000000 000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 0, 2, 0, 2, 0, 1, 16, 12, 0, 1, 32, 0, 0};
}


class titanic_model_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_26_class_0.score0(fdata);
  }
}
class titanic_model_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (data[4 /* Ticket */] <6748.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <10.00643f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <22.772345f ? 
                    0.002170061f : 
                    -0.12505986f) : 
                0.10273627f) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <24.66703f ? 
                     (data[1 /* Age */] <9.396433f ? 
                        0.034107246f : 
                        -0.058296584f) : 
                     (data[5 /* Fare */] <10.665235f ? 
                        0.02586027f : 
                        -0.056785394f)) : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <36.479687f ? 
                        0.105495796f : 
                        0.08375157f) : 
                    0.123293795f))) : 
         (data[4 /* Ticket */] <12804.5f ? 
             (data[1 /* Age */] <19.595215f ? 
                0.039402418f : 
                 (data[2 /* SibSp */] <0.5f ? 
                    0.020710085f : 
                    -0.15181386f)) : 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <284254.5f ? 
                 (data[1 /* Age */] <42.414062f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <31.226562f ? 
                        0.085858695f : 
                        0.04269573f) : 
                     (data[4 /* Ticket */] <237686.5f ? 
                        0.11925969f : 
                        -0.062168833f)) : 
                 (Double.isNaN(data[3]) || data[3 /* Parch */] <0.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.599609f ? 
                        -0.022766043f : 
                        0.09689781f) : 
                     (data[1 /* Age */] <8.5625f ? 
                        -0.024197573f : 
                        -0.0858386f)))));
    return pred;
  } // constant pool size = 123B, number of visited nodes = 20, static init size = 246B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100011 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 100100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, -60, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 9};
  // {00000000 00001000 00000000 00000011 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00101001 01000000 00000000 00001000 000100}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 16, 0, -64, 0, 0, 32, 0, 0, 0, 0, 0, -108, 2, 0, 16, 8};
}


class titanic_model_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_27_class_0.score0(fdata);
  }
}
class titanic_model_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
            -0.1155401f : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                -0.105691016f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                    -0.104857914f : 
                    -0.104550675f))) : 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <248983.5f ? 
             (data[1 /* Age */] <63.524452f ? 
                 (data[1 /* Age */] <8.554559f ? 
                    0.12423175f : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <44.284378f ? 
                        0.015340562f : 
                        0.09391104f)) : 
                 (data[4 /* Ticket */] <233236.0f ? 
                     (data[5 /* Fare */] <14.220312f ? 
                        0.05732465f : 
                        -0.02601104f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <24.885548f ? 
                        -0.14145419f : 
                        -0.04362714f))) : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <38.500275f ? 
                 (data[1 /* Age */] <26.488468f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <21.017168f ? 
                        -0.016758451f : 
                        -0.08378803f) : 
                     (data[1 /* Age */] <29.456285f ? 
                        0.1320701f : 
                        -0.0049221013f)) : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <44.46312f ? 
                    -0.10108454f : 
                    -0.12542924f))));
    return pred;
  } // constant pool size = 138B, number of visited nodes = 16, static init size = 432B
  // {00101011 01001010 10111110 01111111 11111100 01111100 10101010 11010111 10011001 10101101 11111111 00111110 10101111 11111011 10100110 01101100 110110}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, -2, 63, 62, 85, -21, -103, -75, -1, 124, -11, -33, 101, 54, 27};
  // {11111011 11111111 11111110 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11101100 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, -1, 127, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, 127, 55, 63};
  // {01111111 11011010 11111111 11111111 11111110 01111110 11111111 11011111 10011001 10111111 11111111 11111111 10111111 11111111 10100111 11111111 110111}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, 91, -1, -1, 127, 126, -1, -5, -103, -3, -1, -1, -3, -1, -27, -1, 59};
  // {01010000 10010000 01000000 00000000 00000000 00000000 01010000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 10000000 000001}
  public static final byte[] GRPSPLIT3 = new byte[] {10, 9, 2, 0, 0, 0, 10, 0, 0, 0, 0, -128, 0, 0, 0, 1, 32};
}


class titanic_model_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_28_class_0.score0(fdata);
  }
}
class titanic_model_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (data[1 /* Age */] <5.4714646f ? 
             (Double.isNaN(data[1]) || data[1 /* Age */] <2.501756f ? 
                -0.009789948f : 
                0.10662263f) : 
             (data[1 /* Age */] <11.49448f ? 
                -0.069873735f : 
                 (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                        -0.027271472f : 
                        0.004440386f) : 
                     (data[1 /* Age */] <36.88735f ? 
                        0.02743691f : 
                        -0.013251076f)))) : 
         (Double.isNaN(data[1]) || data[1 /* Age */] <53.499237f ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 130, 2, data[6])) ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 130, 2, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 130, 2, data[6])) ? 
                        0.10408011f : 
                        0.10446535f) : 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 130, 2, data[6])) ? 
                        0.10475106f : 
                        0.10505937f)) : 
                0.10748242f) : 
            0.07089746f));
    return pred;
  } // constant pool size = 150B, number of visited nodes = 12, static init size = 600B
  // {00101011 01001010 10111110 01111110 11111100 01111100 00100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, 126, 63, 62, 68, -21, 25, -75, -2, 124, -11, -33, 101, 52, 10};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {3, 0, 0, 0};
  // {...2 0-bits... 10000000 00000000 11010001 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00010001}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, -117, 0, 4, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, -120, 0};
  // {...2 0-bits... 00000000 00000010 00101000 01000011 10010001 10000000 00000011 00000110 00000010 10000100 01000100 11000000 00100110 00000110 10010000 00100000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 64, 20, -62, -119, 1, -64, 96, 64, 33, 34, 3, 100, 96, 9, 4, 0};
  // {...2 0-bits... 11111110 11110111 11111111 11111111 11111111 11011111 11111111 11110111 11111111 11011111 01110111 11111111 11111111 00111111 11110111 11111111}
  public static final byte[] GRPSPLIT5 = new byte[] {127, -17, -1, -1, -1, -5, -1, -17, -1, -5, -18, -1, -1, -4, -17, -1, 3};
  // {...2 0-bits... 00000000 00000010 00101000 00000010 00000000 10000000 00000011 00000010 00000010 10000000 00000000 01000000 00000000 00000010 10010000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 64, 20, 64, 0, 1, -64, 64, 64, 1, 0, 2, 0, 64, 9, 0, 0};
}


class titanic_model_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_29_class_0.score0(fdata);
  }
}
class titanic_model_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* Age */] <1.5080078f ? 
        0.12432832f : 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
            -0.13099375f : 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <52.033436f ? 
                 (data[5 /* Fare */] <6.910691f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <19.0625f ? 
                        -0.13541396f : 
                        -0.032570396f) : 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
                        -0.012253078f : 
                        0.019663837f)) : 
                 (data[5 /* Fare */] <66.41768f ? 
                     (data[5 /* Fare */] <56.236687f ? 
                        0.047261614f : 
                        0.1273075f) : 
                     (!Double.isNaN(data[0 /* Sex */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                        -0.033211507f : 
                        0.08567107f)))));
    return pred;
  } // constant pool size = 66B, number of visited nodes = 9, static init size = 168B
  // {11111011 11111111 11111110 11111111 11111111 11111111 11111011 11110111 11011111 11111111 11111111 11111111 11111111 11111111 11111110 11101100 111111}
  public static final byte[] GRPSPLIT0 = new byte[] {-33, -1, 127, -1, -1, -1, -33, -17, -5, -1, -1, -1, -1, -1, 127, 55, 63};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {3, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_30_class_0.score0(fdata);
  }
}
class titanic_model_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
            -0.10701305f : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                    -0.10504981f : 
                    -0.10474033f) : 
                -0.10406258f)) : 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <248983.5f ? 
             (data[1 /* Age */] <63.524452f ? 
                 (data[1 /* Age */] <8.554559f ? 
                    0.12123123f : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <44.284378f ? 
                        0.013386149f : 
                        0.08625403f)) : 
                 (data[4 /* Ticket */] <233236.0f ? 
                     (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                        -0.028543938f : 
                        0.05607742f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <24.885548f ? 
                        -0.13834617f : 
                        -0.043203227f))) : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <38.500275f ? 
                 (data[1 /* Age */] <26.488468f ? 
                     (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
                        -0.04351286f : 
                        0.029488333f) : 
                     (data[1 /* Age */] <30.26569f ? 
                        0.09506961f : 
                        -0.009121762f)) : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <44.46312f ? 
                    -0.09499846f : 
                    -0.122422874f))));
    return pred;
  } // constant pool size = 143B, number of visited nodes = 16, static init size = 462B
  // {00101011 01001010 10111110 01111111 11111100 01111100 10101010 11010111 10011001 10101101 11111111 00111110 10101111 11111011 10100110 01101100 110110}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, -2, 63, 62, 85, -21, -103, -75, -1, 124, -11, -33, 101, 54, 27};
  // {11111011 11111011 11111110 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11101110 11101111 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, -33, 127, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, 119, -9, 63};
  // {01010000 10010001 01000000 10000000 00000010 00000010 01010001 00000000 00000000 00010010 00000000 10000001 00010000 00000000 00000000 10000000 000001}
  public static final byte[] GRPSPLIT2 = new byte[] {10, -119, 2, 1, 64, 64, -118, 0, 0, 72, 0, -127, 8, 0, 0, 1, 32};
  // {00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00100100 01000000 00000000 01000000 01000000 00000100 00000000 00000011 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, -128, 0, 0, 0, 36, 2, 0, 2, 2, 32, 0, -64, 0};
  // {01100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {6, 0, 0, 0};
}


class titanic_model_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_31_class_0.score0(fdata);
  }
}
class titanic_model_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (Double.isNaN(data[2]) || data[2 /* SibSp */] <4.5f ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                    -0.10139548f : 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.104411654f : 
                        -0.10366112f)) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <56.036007f ? 
                     (data[1 /* Age */] <36.060314f ? 
                        0.0050321966f : 
                        -0.022012657f) : 
                     (data[5 /* Fare */] <70.295166f ? 
                        0.11203009f : 
                        0.03961275f))) : 
            -0.1181593f) : 
         (Double.isNaN(data[1]) || data[1 /* Age */] <53.499237f ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 130, 2, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 130, 2, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 130, 2, data[6])) ? 
                        0.10335577f : 
                        0.10359701f) : 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 130, 2, data[6])) ? 
                        0.10386476f : 
                        0.1041422f)) : 
                0.1063257f) : 
            0.06512333f));
    return pred;
  } // constant pool size = 198B, number of visited nodes = 13, static init size = 864B
  // {00101011 01001010 10111110 01111110 11111100 01111100 00100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, 126, 63, 62, 68, -21, 25, -75, -2, 124, -11, -33, 101, 52, 10};
  // {00000000 00000000 00000000 00000001 00000000 00000000 10001000 00000000 00000001 00000000 10000000 00000000 00000000 00000000 00000000 01000000 100010}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, -128, 0, 0, 17, 0, -128, 0, 1, 0, 0, 0, 0, 2, 17};
  // {11111011 11111011 11111110 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11101110 11101111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -33, 127, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, 119, -9, 63};
  // {01010000 10010001 01000000 10000000 00000010 00000010 01010001 00000000 00000000 00010010 00000000 10000001 00010000 00000000 00000000 10000000 000001}
  public static final byte[] GRPSPLIT3 = new byte[] {10, -119, 2, 1, 64, 64, -118, 0, 0, 72, 0, -127, 8, 0, 0, 1, 32};
  // {...2 0-bits... 10000000 00000000 01000001 00000000 00100000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000101 00000000 00000000 00010001}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, -126, 0, 4, 0, 0, 0, 0, 1, 0, 0, -96, 0, 0, -120, 0};
  // {...2 0-bits... 11111110 11111111 11111111 11101110 10111111 11011111 11110111 11111111 10111111 11011110 01010111 11011111 11110111 01111111 11110111 01111111}
  public static final byte[] GRPSPLIT5 = new byte[] {127, -1, -1, 119, -3, -5, -17, -1, -3, 123, -22, -5, -17, -2, -17, -2, 1};
  // {...2 0-bits... 00000000 00000000 00000000 00010000 01000000 00000000 00001000 00000000 01000000 00000000 00100000 00100000 00001000 00000000 00001000 10000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 8, 2, 0, 16, 0, 2, 0, 4, 4, 16, 0, 16, 1, 0};
  // {...2 0-bits... 00000000 00000000 10111000 01000010 00000001 10000000 00000011 01000010 00100010 00000000 00000100 01000010 10100010 00000000 10010000 00100000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 29, 66, -128, 1, -64, 66, 68, 0, 32, 66, 69, 0, 9, 4, 0};
}


class titanic_model_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_32_class_0.score0(fdata);
  }
}
class titanic_model_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* Age */] <1.5080078f ? 
        0.12164592f : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                -0.123750515f : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <112.072014f ? 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <1.5f ? 
                        -0.0023203176f : 
                        -0.040281318f) : 
                    0.09690786f)) : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <53.47829f ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(130, 2, data[6]) || (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 130, 2, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(130, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 130, 2, data[6])) ? 
                        0.10314328f : 
                        0.10361348f) : 
                    0.10569956f) : 
                0.061054148f)));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 8, static init size = 432B
  // {00101011 01001010 10111110 01111110 11111100 01111100 00100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, 126, 63, 62, 68, -21, 25, -75, -2, 124, -11, -33, 101, 52, 10};
  // {11111011 11111011 11111110 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 10101110 11101111 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, -33, 127, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, 117, -9, 63};
  // {...2 0-bits... 10000000 00000000 01000001 00000000 00100000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000101 00000000 00000000 00010001}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, -126, 0, 4, 0, 0, 0, 0, 1, 0, 0, -96, 0, 0, -120, 0};
  // {...2 0-bits... 11111110 11111111 11111111 11101110 10111111 11011111 11110111 11111111 10111111 11011110 01010111 11011111 11110111 01111111 11110111 01111111}
  public static final byte[] GRPSPLIT3 = new byte[] {127, -1, -1, 119, -3, -5, -17, -1, -3, 123, -22, -5, -17, -2, -17, -2, 3};
}


class titanic_model_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_33_class_0.score0(fdata);
  }
}
class titanic_model_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367073.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <314120.5f ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                    -0.0942427f : 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                        -0.10387714f : 
                        -0.10328973f)) : 
                 (data[1 /* Age */] <8.502344f ? 
                    0.11869021f : 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.024758734f : 
                        -0.015969412f))) : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <20.47043f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <9.518313f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <2.5306344f ? 
                        -0.06653988f : 
                        0.05790806f) : 
                     (data[1 /* Age */] <18.444124f ? 
                        -0.15580514f : 
                        -0.07076352f)) : 
                 (data[1 /* Age */] <30.089025f ? 
                     (data[5 /* Fare */] <7.809375f ? 
                        0.12653758f : 
                        -0.016846668f) : 
                     (data[5 /* Fare */] <7.809375f ? 
                        -0.122371055f : 
                        -0.046077784f)))) : 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
             (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                -0.10474604f : 
                0.058078926f) : 
            0.094725326f));
    return pred;
  } // constant pool size = 130B, number of visited nodes = 16, static init size = 384B
  // {00101011 01001010 10111110 01111111 11111100 01111100 10101010 11010111 10011001 10101101 11111111 00111110 10101111 11111011 10100110 01101111 111110}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, -2, 63, 62, 85, -21, -103, -75, -1, 124, -11, -33, 101, -10, 31};
  // {11111111 11011111 11111110 11111111 11111111 11111111 11111011 11110111 11111101 11111111 11111111 11111111 10111111 11111111 11111110 11101111 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -5, 127, -1, -1, -1, -33, -17, -65, -1, -1, -1, -3, -1, 127, -9, 63};
  // {01010000 10010001 01000000 10000000 00000010 00000010 01010001 00000000 00000000 00000000 00000000 10000001 00010000 00000000 00000000 10000000 000001}
  public static final byte[] GRPSPLIT2 = new byte[] {10, -119, 2, 1, 64, 64, -118, 0, 0, 0, 0, -127, 8, 0, 0, 1, 32};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
}


class titanic_model_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_34_class_0.score0(fdata);
  }
}
class titanic_model_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (data[4 /* Ticket */] <6748.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <10.00643f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <22.772345f ? 
                    -0.005086952f : 
                    -0.1230182f) : 
                0.08890273f) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <12.007715f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <23.695625f ? 
                        -0.037031967f : 
                        0.025916189f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <103955.5f ? 
                        -0.0837087f : 
                        -0.009649828f)) : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        0.10276433f : 
                        0.10311164f) : 
                    0.12013298f))) : 
         (data[4 /* Ticket */] <12804.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <17.260254f ? 
                 (data[5 /* Fare */] <10.165016f ? 
                    0.01626127f : 
                    -0.12615734f) : 
                0.029764488f) : 
             (data[4 /* Ticket */] <242029.5f ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(117, 16, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 117, 16, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(117, 16, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 117, 16, data[6])) ? 
                        -0.042108852f : 
                        0.10316577f) : 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.079263985f : 
                        0.1284196f)) : 
                 (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[7])) ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <42.171875f ? 
                        0.0018863145f : 
                        -0.08399749f) : 
                     (data[5 /* Fare */] <64.80664f ? 
                        0.115342185f : 
                        0.1150116f)))));
    return pred;
  } // constant pool size = 178B, number of visited nodes = 20, static init size = 576B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001011 01001010 00000000 00100011 00000000 01001100 00100100 00010010 00001000 00001100 01000100 00110010 00101001 01111000 00000010 00001000 000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-48, 82, 0, -60, 0, 50, 36, 72, 16, 48, 34, 76, -108, 30, 64, 16, 8};
  // {00001000 00000000 00000000 00000001 00000000 01000000 00000100 00010000 00000000 00000100 00000000 00000000 00001001 01000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, -128, 0, 2, 32, 8, 0, 32, 0, 0, -112, 2, 0, 0, 0};
  // {11111111 10111111 11111111 11111111 11111111 11110111 11011111 11111111 11111111 11110111 10111111 11011111 11111111 11001111 11111101 11111111 111011}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -3, -1, -1, -1, -17, -5, -1, -1, -17, -3, -5, -1, -13, -65, -1, 55};
  // {...16 0-bits... 00000000 00000000 00000000 00000000 10001000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 17, 0, -128, 0, 0, 0, 0, 0, 0, 2, 0};
  // {...16 0-bits... 11111111 11111011 11101111 11101111 11111011 11111111 11111111 11111111 11011101 11111011 11111011 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -33, -9, -9, -33, -1, -1, -1, -69, -33, -33, -1, -1, -1, 31};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_35_class_0.score0(fdata);
  }
}
class titanic_model_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367073.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <347753.5f ? 
             (data[1 /* Age */] <8.502344f ? 
                 (data[1 /* Age */] <2.5037293f ? 
                    -0.003041364f : 
                    0.124655195f) : 
                 (data[1 /* Age */] <11.574509f ? 
                    -0.11346629f : 
                     (data[1 /* Age */] <63.962776f ? 
                        0.011284808f : 
                        -0.024830177f))) : 
             (!Double.isNaN(data[0 /* Sex */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
                -0.08287196f : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <349938.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <28.71875f ? 
                        -0.114209495f : 
                        -0.03640423f) : 
                     (data[1 /* Age */] <32.28125f ? 
                        0.13497812f : 
                        -0.10900421f)))) : 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                -0.10334196f : 
                0.05224629f) : 
            0.08817602f));
    return pred;
  } // constant pool size = 65B, number of visited nodes = 12, static init size = 90B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
}


class titanic_model_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_36_class_0.score0(fdata);
  }
}
class titanic_model_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* Age */] <1.5080078f ? 
        0.119763985f : 
         (Double.isNaN(data[2]) || data[2 /* SibSp */] <4.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <52.033436f ? 
                 (data[5 /* Fare */] <6.910691f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <19.0625f ? 
                        -0.12740223f : 
                        -0.026988309f) : 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[7])) ? 
                        -0.010574075f : 
                        0.017338589f)) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                        -0.11529666f : 
                        0.07001791f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <73.6098f ? 
                        0.051744f : 
                        0.09738655f))) : 
            -0.11532532f));
    return pred;
  } // constant pool size = 79B, number of visited nodes = 9, static init size = 246B
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {3, 0, 0, 0};
  // {00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111100 11111111 11111011 11011111 10011001 10101101 11111111 00111111 10111111 11111011 11101111 11111111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, 63, -1, -33, -5, -103, -75, -1, -4, -3, -33, -9, -1, 63};
}


class titanic_model_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_37_class_0.score0(fdata);
  }
}
class titanic_model_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367073.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <314120.5f ? 
             (data[1 /* Age */] <20.15957f ? 
                 (data[5 /* Fare */] <12.007715f ? 
                     (!Double.isNaN(data[4]) ? 
                        0.029127747f : 
                        0.17145063f) : 
                     (data[1 /* Age */] <8.527344f ? 
                        0.08998719f : 
                        -0.019643279f)) : 
                 (data[1 /* Age */] <23.899597f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <40.02572f ? 
                        -0.07982461f : 
                        0.028744033f) : 
                     (data[1 /* Age */] <24.776165f ? 
                        0.11563937f : 
                        8.6119235E-4f))) : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <20.47043f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <9.518313f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <2.5306344f ? 
                        -0.058717664f : 
                        0.049867492f) : 
                     (data[1 /* Age */] <18.444124f ? 
                        -0.14656031f : 
                        -0.0649804f)) : 
                 (data[1 /* Age */] <30.089025f ? 
                     (data[5 /* Fare */] <7.809375f ? 
                        0.104392f : 
                        -0.012307665f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <8.3988285f ? 
                        -0.08937781f : 
                        -0.022697423f)))) : 
         (Double.isNaN(data[5]) || data[5 /* Fare */] <24.01543f ? 
             (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
                    -0.09981848f : 
                    0.11345723f) : 
                0.10678952f) : 
            -0.104991f));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 19, static init size = 60B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
}


class titanic_model_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_38_class_0.score0(fdata);
  }
}
class titanic_model_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <370101.5f ? 
             (data[1 /* Age */] <9.434922f ? 
                0.08328873f : 
                 (data[4 /* Ticket */] <3565.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <8.005144f ? 
                        -0.03509135f : 
                        0.06900124f) : 
                     (data[1 /* Age */] <24.21875f ? 
                        -0.048495453f : 
                        -0.0060092453f))) : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <4.927461f ? 
                -0.11441135f : 
                -0.012827214f)) : 
         (data[4 /* Ticket */] <12804.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <25.768555f ? 
                 (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
                    -0.10531247f : 
                    -0.009790125f) : 
                0.14153866f) : 
             (data[4 /* Ticket */] <338544.5f ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(117, 16, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 117, 16, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(117, 16, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 117, 16, data[6])) ? 
                        -0.05098429f : 
                        0.1027892f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <236969.5f ? 
                        0.12018518f : 
                        0.013576645f)) : 
                 (data[4 /* Ticket */] <360129.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <19.375f ? 
                        -0.086674735f : 
                        0.0010767754f) : 
                     (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                        -0.03477579f : 
                        0.036342543f)))));
    return pred;
  } // constant pool size = 117B, number of visited nodes = 17, static init size = 282B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {3, 0, 0, 0};
  // {...16 0-bits... 00000000 00000000 00000000 00000000 10001000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 17, 0, -128, 0, 0, 0, 0, 0, 0, 2, 0};
  // {...16 0-bits... 11111111 11111111 11111111 11111111 11111001 11111111 11101111 11111111 11011101 11111111 11111101 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -97, -1, -9, -1, -69, -1, -65, -1, -1, -1, 23};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {5, 0, 0, 0};
}


class titanic_model_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_39_class_0.score0(fdata);
  }
}
class titanic_model_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367073.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <347753.5f ? 
             (data[1 /* Age */] <63.524452f ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
                     (data[5 /* Fare */] <32.020576f ? 
                        -0.11889306f : 
                        -0.048614066f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <49.720352f ? 
                        0.009010966f : 
                        0.07287316f)) : 
                 (data[4 /* Ticket */] <339610.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <14.220312f ? 
                        0.0399603f : 
                        -0.036458522f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <24.885548f ? 
                        -0.14371116f : 
                        -0.04109984f))) : 
             (!Double.isNaN(data[0 /* Sex */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                -0.07021107f : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <349938.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <28.71875f ? 
                        -0.11227439f : 
                        -0.028341305f) : 
                     (data[1 /* Age */] <32.28125f ? 
                        0.120827444f : 
                        -0.10742694f)))) : 
         (data[4 /* Ticket */] <372414.5f ? 
             (data[4 /* Ticket */] <370246.0f ? 
                0.15973443f : 
                0.049767915f) : 
             (data[1 /* Age */] <33.5f ? 
                0.06780109f : 
                -0.112188816f)));
    return pred;
  } // constant pool size = 89B, number of visited nodes = 16, static init size = 138B
  // {01111011 11011011 10111110 01111110 11111100 01111100 11110010 11010111 10011000 10101111 11111111 00111110 10101111 11111011 11100110 00101111 111110}
  public static final byte[] GRPSPLIT0 = new byte[] {-34, -37, 125, 126, 63, 62, 79, -21, 25, -11, -1, 124, -11, -33, 103, -12, 31};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
}


class titanic_model_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_40_class_0.score0(fdata);
  }
}
class titanic_model_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* Age */] <1.5080078f ? 
        0.119592436f : 
         (Double.isNaN(data[2]) || data[2 /* SibSp */] <4.5f ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                    -0.116446525f : 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                        -0.103180625f : 
                        -0.10265757f)) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <52.033436f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <32.520897f ? 
                        -1.9535155E-4f : 
                        -0.056455113f) : 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(131, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 131, 2, data[6])) ? 
                        0.064816326f : 
                        0.06138231f))) : 
            -0.11391489f));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 8, static init size = 432B
  // {00101011 01001010 10111110 01111111 11111100 01111100 10101010 11010111 10011001 10101101 11111111 00111110 10101111 11111011 10100110 01101100 110110}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, -2, 63, 62, 85, -21, -103, -75, -1, 124, -11, -33, 101, 54, 27};
  // {11111111 11011111 11111110 11111111 11111111 01111111 11111011 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111110 11101111 110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -5, 127, -1, -1, -2, -33, -17, -65, -1, -1, -1, -1, -1, 127, -9, 59};
  // {01111011 11111011 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 10110111 11111100 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-34, -33, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -3, -1, -19, 63, 63};
  // {...2 0-bits... 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}


class titanic_model_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_41_class_0.score0(fdata);
  }
}
class titanic_model_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367073.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <347753.5f ? 
             (data[1 /* Age */] <8.502344f ? 
                 (data[1 /* Age */] <2.5037293f ? 
                    -0.010507638f : 
                    0.11153495f) : 
                 (data[1 /* Age */] <11.574509f ? 
                    -0.10558756f : 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.011761743f : 
                        -0.016766325f))) : 
             (!Double.isNaN(data[0 /* Sex */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
                -0.0635234f : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <349938.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <28.71875f ? 
                        -0.11104008f : 
                        -0.02589444f) : 
                     (data[1 /* Age */] <32.28125f ? 
                        0.10186084f : 
                        -0.10667072f)))) : 
         (Double.isNaN(data[5]) || data[5 /* Fare */] <24.01543f ? 
             (data[1 /* Age */] <33.5f ? 
                0.13181444f : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <11.731487f ? 
                    -0.05010042f : 
                    0.13805829f)) : 
            -0.09510546f));
    return pred;
  } // constant pool size = 59B, number of visited nodes = 13, static init size = 30B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
}


class titanic_model_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_42_class_0.score0(fdata);
  }
}
class titanic_model_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[1]) || data[1 /* Age */] <63.058163f ? 
             (Double.isNaN(data[1]) || data[1 /* Age */] <41.403954f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <32.27862f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.78525f ? 
                        -0.008494399f : 
                        0.06186847f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <24.01543f ? 
                        -0.110521f : 
                        0.019431816f)) : 
                 (data[1 /* Age */] <45.507072f ? 
                     (data[5 /* Fare */] <14.617969f ? 
                        0.2494893f : 
                        0.051340297f) : 
                     (data[5 /* Fare */] <10.441406f ? 
                        -0.11298115f : 
                        0.0035235214f))) : 
            -0.11555993f) : 
         (data[4 /* Ticket */] <12804.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <25.768555f ? 
                 (data[5 /* Fare */] <10.194866f ? 
                    0.018972276f : 
                     (data[5 /* Fare */] <15.56387f ? 
                        -0.11527928f : 
                        -0.016393038f)) : 
                0.13899288f) : 
             (data[5 /* Fare */] <9.75293f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <7.911289f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <18.601562f ? 
                        0.0027687473f : 
                        0.041522793f) : 
                    -0.09281551f) : 
                 (Double.isNaN(data[3]) || data[3 /* Parch */] <0.5f ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(117, 16, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 117, 16, data[6])) ? 
                        0.06800631f : 
                        0.07436411f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <278859.5f ? 
                        0.024762707f : 
                        -0.057683893f)))));
    return pred;
  } // constant pool size = 99B, number of visited nodes = 19, static init size = 126B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {...16 0-bits... 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0};
}


class titanic_model_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_43_class_0.score0(fdata);
  }
}
class titanic_model_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* Age */] <1.5080078f ? 
        0.118769296f : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
             (data[5 /* Fare */] <8.005144f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <32.65625f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <19.449707f ? 
                        -0.0073337834f : 
                        0.04736441f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <7.801172f ? 
                        -0.11540152f : 
                        0.037826817f)) : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <28.4375f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <19.556152f ? 
                        -0.008941152f : 
                        -0.04909999f) : 
                     (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                        -0.01253527f : 
                        0.02752842f))) : 
             (data[1 /* Age */] <17.451694f ? 
                -0.019418472f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(131, 2, data[6]) || (GenModel.bitSetIsInRange(131, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 131, 2, data[6])) ? 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(131, 2, data[6]) || (GenModel.bitSetIsInRange(131, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 131, 2, data[6])) ? 
                        0.102099515f : 
                        0.10259908f) : 
                    0.123494886f))));
    return pred;
  } // constant pool size = 109B, number of visited nodes = 12, static init size = 354B
  // {00101011 01001010 10101110 01111110 11111100 01111100 00100010 11010111 10011000 10101101 01111111 00111110 10101111 11111011 10100110 00101100 010110}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 117, 126, 63, 62, 68, -21, 25, -75, -2, 124, -11, -33, 101, 52, 26};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {...2 0-bits... 10100000 00000000 00000000 00000000 00100000 00010000 00000000 01000000 00000000 00000000 00000100 00001000 00100000 00000000 00000000 00010000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {5, 0, 0, 0, 4, 8, 0, 2, 0, 0, 32, 16, 4, 0, 0, 8, 4};
  // {...2 0-bits... 00001100 00100000 00000001 11001010 00000001 10000000 10000000 00001010 00000010 10000100 00010000 01000010 10000110 01100000 00011000 00100001 0}
  public static final byte[] GRPSPLIT3 = new byte[] {48, 4, -128, 83, -128, 1, 1, 80, 64, 33, 8, 66, 97, 6, 24, -124, 0};
}


class titanic_model_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_44_class_0.score0(fdata);
  }
}
class titanic_model_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* SibSp */] <4.5f ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                -0.09303255f : 
                 (data[1 /* Age */] <39.58828f ? 
                    -0.038423695f : 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(133, 1, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 133, 1, data[6])) ? 
                        -0.10702978f : 
                        -0.10233813f))) : 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <50.03215f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <32.8336f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <29.75545f ? 
                        -0.0011021236f : 
                        0.06970946f) : 
                     (data[5 /* Fare */] <38.043163f ? 
                        -0.10842583f : 
                        -0.01552524f)) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(131, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 131, 2, data[6])) ? 
                     (!Double.isNaN(data[0 /* Sex */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        0.018845126f : 
                        0.102870986f) : 
                     (!Double.isNaN(data[4]) ? 
                        0.11765496f : 
                        0.015682569f)))) : 
        -0.1125371f);
    return pred;
  } // constant pool size = 125B, number of visited nodes = 12, static init size = 462B
  // {00101011 01001010 10111110 01111111 11111100 01111100 10101010 11010111 10011000 10101101 11111111 00111110 10101111 11111011 10100110 00101100 110110}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, -2, 63, 62, 85, -21, 25, -75, -1, 124, -11, -33, 101, 52, 27};
  // {01111011 11111111 11111110 11111111 11111111 11111111 11111011 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11101111 110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-34, -1, 127, -1, -1, -1, -33, -17, -1, -1, -1, -1, -1, -1, 127, -9, 59};
  // {...1 0-bits... 11111111 11110111 11111110 11111111 11111111 11111011 11111111 11111111 11111101 11111111 11111111 11111111 01111111 11111111 11101110 01111011 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -17, 127, -1, -1, -33, -1, -1, -65, -1, -1, -1, -2, -1, 119, -34, 15};
  // {...2 0-bits... 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_45_class_0.score0(fdata);
  }
}
class titanic_model_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367073.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <314120.5f ? 
             (data[1 /* Age */] <20.15957f ? 
                 (data[5 /* Fare */] <12.007715f ? 
                     (!Double.isNaN(data[4]) ? 
                        0.029327305f : 
                        0.14946836f) : 
                     (data[3 /* Parch */] <0.5f ? 
                        -0.04462617f : 
                        0.045202967f)) : 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <23.289062f ? 
                        -0.021110246f : 
                        0.03547369f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <112.072014f ? 
                        -0.043018073f : 
                        0.15547106f))) : 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <14.009002f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <9.242886f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <362874.5f ? 
                        -0.01828743f : 
                        -0.1473629f) : 
                    0.08902191f) : 
                 (data[1 /* Age */] <32.652344f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <26.122744f ? 
                        -0.13638586f : 
                        -0.009202624f) : 
                    0.026479265f))) : 
         (data[4 /* Ticket */] <372414.5f ? 
             (data[4 /* Ticket */] <370246.0f ? 
                0.14323707f : 
                0.040723298f) : 
             (data[1 /* Age */] <33.5f ? 
                0.05663584f : 
                -0.108187094f)));
    return pred;
  } // constant pool size = 68B, number of visited nodes = 17, static init size = 0B
}


class titanic_model_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_46_class_0.score0(fdata);
  }
}
class titanic_model_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[7])) ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <376157.5f ? 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <313825.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <39.177967f ? 
                        -0.0030525683f : 
                        0.082425594f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <104.78906f ? 
                        -0.034647953f : 
                        0.09235288f)) : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <20.313242f ? 
                     (data[1 /* Age */] <5.526541f ? 
                        0.012349607f : 
                        -0.1125525f) : 
                     (data[1 /* Age */] <27.443514f ? 
                        0.049829997f : 
                        -0.033265322f))) : 
            0.064122394f) : 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <379185.0f ? 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <365946.5f ? 
                 (data[4 /* Ticket */] <357431.5f ? 
                     (data[1 /* Age */] <29.093124f ? 
                        0.0575992f : 
                        0.002662284f) : 
                     (data[5 /* Fare */] <35.782295f ? 
                        -0.080728985f : 
                        0.012811271f)) : 
                0.08866106f) : 
            -0.09163437f));
    return pred;
  } // constant pool size = 63B, number of visited nodes = 14, static init size = 30B
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {3, 0, 0, 0};
}


class titanic_model_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_47_class_0.score0(fdata);
  }
}
class titanic_model_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[1]) || data[1 /* Age */] <50.46836f ? 
             (Double.isNaN(data[1]) || data[1 /* Age */] <43.43031f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <32.173706f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <31.429478f ? 
                        -0.006069848f : 
                        0.07332491f) : 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
                        -0.0800361f : 
                        0.045627713f)) : 
                 (data[1 /* Age */] <45.509f ? 
                    0.24637994f : 
                    -0.011051879f)) : 
             (data[5 /* Fare */] <12.007715f ? 
                0.027994025f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(118, 4, data[6]) || (GenModel.bitSetIsInRange(118, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 118, 4, data[6])) ? 
                    -0.12505257f : 
                    -0.047056377f))) : 
         (data[4 /* Ticket */] <12804.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <25.768555f ? 
                 (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                    -0.09593279f : 
                    -0.006009785f) : 
                0.14153291f) : 
             (data[5 /* Fare */] <9.75293f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <7.911289f ? 
                     (data[1 /* Age */] <23.929688f ? 
                        0.041068204f : 
                        3.6963963E-4f) : 
                    -0.083191514f) : 
                 (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(117, 16, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 117, 16, data[6])) ? 
                        0.026143586f : 
                        0.05800555f) : 
                     (data[1 /* Age */] <38.78125f ? 
                        0.011401507f : 
                        -0.09806293f)))));
    return pred;
  } // constant pool size = 121B, number of visited nodes = 18, static init size = 282B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {3, 0, 0, 0};
  // {...16 0-bits... 00000000 00000000 00000000 00000000 10001000 00000000 00000001 00000000 10000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 17, 0, -128, 0, 1, 0, 0, 0, 0, 2, 0};
}


class titanic_model_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_48_class_0.score0(fdata);
  }
}
class titanic_model_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
            -0.095186256f : 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <6749.0f ? 
                0.02642903f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(133, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 133, 0, data[6])) ? 
                    -0.12455622f : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <37.578125f ? 
                        -0.05117564f : 
                        -0.10496207f)))) : 
         (data[1 /* Age */] <5.4714646f ? 
             (data[5 /* Fare */] <20.01286f ? 
                0.12031505f : 
                6.729321E-4f) : 
             (data[1 /* Age */] <11.43957f ? 
                 (data[2 /* SibSp */] <2.5f ? 
                    -0.022082629f : 
                    -0.11186173f) : 
                 (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <104.06687f ? 
                        -0.00794029f : 
                        0.19409443f) : 
                     (data[1 /* Age */] <29.650934f ? 
                        0.051306307f : 
                        7.245311E-4f)))));
    return pred;
  } // constant pool size = 109B, number of visited nodes = 12, static init size = 354B
  // {00101011 01001010 10111110 01111111 11111100 01111100 10101010 11010111 10011000 10101101 11111111 00111110 10101111 11111011 10100110 01101100 110100}
  public static final byte[] GRPSPLIT0 = new byte[] {-44, 82, 125, -2, 63, 62, 85, -21, 25, -75, -1, 124, -11, -33, 101, 54, 11};
  // {11111111 11111111 11111110 01111111 11111111 11111111 11111011 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111110 11101111 111110}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, 127, -2, -1, -1, -33, -17, -65, -1, -1, -1, -1, -1, 127, -9, 31};
  // {01111111 11111111 10111111 11111111 11111111 11111100 11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11110111 01111110 11010}
  public static final byte[] GRPSPLIT2 = new byte[] {-2, -1, -3, -1, -1, 63, -1, -1, -33, -1, -1, -1, -1, -1, -17, 126, 11};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {3, 0, 0, 0};
}


class titanic_model_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_49_class_0.score0(fdata);
  }
}
class titanic_model_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1]) || data[1 /* Age */] <63.524452f ? 
         (Double.isNaN(data[1]) || data[1 /* Age */] <59.5188f ? 
             (data[1 /* Age */] <1.4588461f ? 
                0.11334045f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 134, 0, data[6])) ? 
                    -0.11473188f : 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <4.5f ? 
                        6.1191997E-4f : 
                        -0.11071131f))) : 
            0.13482673f) : 
        -0.113675416f);
    return pred;
  } // constant pool size = 40B, number of visited nodes = 5, static init size = 108B
  // {11111011 11111111 11111110 01111111 11111111 11111111 11111011 11110111 11111101 11111111 11111111 11111111 11111111 11111111 11111110 11101111 111110}
  public static final byte[] GRPSPLIT0 = new byte[] {-33, -1, 127, -2, -1, -1, -33, -17, -65, -1, -1, -1, -1, -1, 127, -9, 31};
}


