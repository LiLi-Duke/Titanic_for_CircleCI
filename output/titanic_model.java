/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-06-08T23:25:08.585-04:00
  3.10.4.8
  
  Standalone prediction code with sample test data for GBMModel named titanic_model

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/titanic_model > titanic_model.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m titanic_model.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="titanic_model", algorithm="gbm")
public class titanic_model extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 8; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_titanic_model.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* Sex */ titanic_model_ColInfo_0.VALUES,
    /* Age */ null,
    /* SibSp */ null,
    /* Parch */ null,
    /* Ticket */ null,
    /* Fare */ null,
    /* Cabin */ titanic_model_ColInfo_6.VALUES,
    /* Embarked */ titanic_model_ColInfo_7.VALUES,
    /* Survived */ titanic_model_ColInfo_8.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.594,0.406};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.594,0.406};

  public titanic_model() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(6093395540967555686L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    titanic_model_Forest_0.score0(data,preds);
    titanic_model_Forest_1.score0(data,preds);
    titanic_model_Forest_2.score0(data,preds);
    titanic_model_Forest_3.score0(data,preds);
    titanic_model_Forest_4.score0(data,preds);
    titanic_model_Forest_5.score0(data,preds);
    titanic_model_Forest_6.score0(data,preds);
    titanic_model_Forest_7.score0(data,preds);
    titanic_model_Forest_8.score0(data,preds);
    titanic_model_Forest_9.score0(data,preds);
    titanic_model_Forest_10.score0(data,preds);
    titanic_model_Forest_11.score0(data,preds);
    titanic_model_Forest_12.score0(data,preds);
    titanic_model_Forest_13.score0(data,preds);
    titanic_model_Forest_14.score0(data,preds);
    titanic_model_Forest_15.score0(data,preds);
    titanic_model_Forest_16.score0(data,preds);
    titanic_model_Forest_17.score0(data,preds);
    titanic_model_Forest_18.score0(data,preds);
    titanic_model_Forest_19.score0(data,preds);
    titanic_model_Forest_20.score0(data,preds);
    titanic_model_Forest_21.score0(data,preds);
    titanic_model_Forest_22.score0(data,preds);
    titanic_model_Forest_23.score0(data,preds);
    titanic_model_Forest_24.score0(data,preds);
    titanic_model_Forest_25.score0(data,preds);
    titanic_model_Forest_26.score0(data,preds);
    titanic_model_Forest_27.score0(data,preds);
    titanic_model_Forest_28.score0(data,preds);
    titanic_model_Forest_29.score0(data,preds);
    titanic_model_Forest_30.score0(data,preds);
    titanic_model_Forest_31.score0(data,preds);
    titanic_model_Forest_32.score0(data,preds);
    titanic_model_Forest_33.score0(data,preds);
    titanic_model_Forest_34.score0(data,preds);
    titanic_model_Forest_35.score0(data,preds);
    titanic_model_Forest_36.score0(data,preds);
    titanic_model_Forest_37.score0(data,preds);
    titanic_model_Forest_38.score0(data,preds);
    titanic_model_Forest_39.score0(data,preds);
    titanic_model_Forest_40.score0(data,preds);
    titanic_model_Forest_41.score0(data,preds);
    titanic_model_Forest_42.score0(data,preds);
    titanic_model_Forest_43.score0(data,preds);
    titanic_model_Forest_44.score0(data,preds);
    titanic_model_Forest_45.score0(data,preds);
    titanic_model_Forest_46.score0(data,preds);
    titanic_model_Forest_47.score0(data,preds);
    titanic_model_Forest_48.score0(data,preds);
    titanic_model_Forest_49.score0(data,preds);
    preds[2] = preds[1] + -0.38052615976091214;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.41573660316324246);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_titanic_model implements java.io.Serializable {
  public static final String[] VALUES = new String[8];
  static {
    NamesHolder_titanic_model_0.fill(VALUES);
  }
  static final class NamesHolder_titanic_model_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Sex";
      sa[1] = "Age";
      sa[2] = "SibSp";
      sa[3] = "Parch";
      sa[4] = "Ticket";
      sa[5] = "Fare";
      sa[6] = "Cabin";
      sa[7] = "Embarked";
    }
  }
}
// The class representing column Sex
class titanic_model_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    titanic_model_ColInfo_0_0.fill(VALUES);
  }
  static final class titanic_model_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "female";
      sa[1] = "male";
    }
  }
}
// The class representing column Cabin
class titanic_model_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[104];
  static {
    titanic_model_ColInfo_6_0.fill(VALUES);
  }
  static final class titanic_model_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "A10";
      sa[1] = "A14";
      sa[2] = "A16";
      sa[3] = "A24";
      sa[4] = "A26";
      sa[5] = "A31";
      sa[6] = "A32";
      sa[7] = "A34";
      sa[8] = "A36";
      sa[9] = "A5";
      sa[10] = "A7";
      sa[11] = "B101";
      sa[12] = "B18";
      sa[13] = "B19";
      sa[14] = "B20";
      sa[15] = "B22";
      sa[16] = "B28";
      sa[17] = "B3";
      sa[18] = "B35";
      sa[19] = "B37";
      sa[20] = "B4";
      sa[21] = "B41";
      sa[22] = "B42";
      sa[23] = "B57 B59 B63 B66";
      sa[24] = "B58 B60";
      sa[25] = "B77";
      sa[26] = "B78";
      sa[27] = "B94";
      sa[28] = "B96 B98";
      sa[29] = "C104";
      sa[30] = "C106";
      sa[31] = "C110";
      sa[32] = "C126";
      sa[33] = "C128";
      sa[34] = "C2";
      sa[35] = "C22 C26";
      sa[36] = "C23 C25 C27";
      sa[37] = "C30";
      sa[38] = "C32";
      sa[39] = "C45";
      sa[40] = "C46";
      sa[41] = "C49";
      sa[42] = "C50";
      sa[43] = "C52";
      sa[44] = "C54";
      sa[45] = "C65";
      sa[46] = "C68";
      sa[47] = "C7";
      sa[48] = "C70";
      sa[49] = "C82";
      sa[50] = "C83";
      sa[51] = "C85";
      sa[52] = "C86";
      sa[53] = "C90";
      sa[54] = "C91";
      sa[55] = "C92";
      sa[56] = "C93";
      sa[57] = "C95";
      sa[58] = "C99";
      sa[59] = "D";
      sa[60] = "D10 D12";
      sa[61] = "D15";
      sa[62] = "D17";
      sa[63] = "D20";
      sa[64] = "D26";
      sa[65] = "D30";
      sa[66] = "D33";
      sa[67] = "D35";
      sa[68] = "D37";
      sa[69] = "D45";
      sa[70] = "D46";
      sa[71] = "D47";
      sa[72] = "D48";
      sa[73] = "D49";
      sa[74] = "D50";
      sa[75] = "D56";
      sa[76] = "D7";
      sa[77] = "E10";
      sa[78] = "E101";
      sa[79] = "E121";
      sa[80] = "E17";
      sa[81] = "E25";
      sa[82] = "E31";
      sa[83] = "E33";
      sa[84] = "E34";
      sa[85] = "E40";
      sa[86] = "E44";
      sa[87] = "E46";
      sa[88] = "E49";
      sa[89] = "E50";
      sa[90] = "E58";
      sa[91] = "E63";
      sa[92] = "E67";
      sa[93] = "E77";
      sa[94] = "E8";
      sa[95] = "F E69";
      sa[96] = "F G63";
      sa[97] = "F G73";
      sa[98] = "F2";
      sa[99] = "F33";
      sa[100] = "F38";
      sa[101] = "F4";
      sa[102] = "G6";
      sa[103] = "T";
    }
  }
}
// The class representing column Embarked
class titanic_model_ColInfo_7 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    titanic_model_ColInfo_7_0.fill(VALUES);
  }
  static final class titanic_model_ColInfo_7_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "C";
      sa[1] = "Q";
      sa[2] = "S";
    }
  }
}
// The class representing column Survived
class titanic_model_ColInfo_8 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    titanic_model_ColInfo_8_0.fill(VALUES);
  }
  static final class titanic_model_ColInfo_8_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class titanic_model_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_0_class_0.score0(fdata);
  }
}
class titanic_model_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <13.066563f ? 
                0.108086884f : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <32.10826f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.835024f ? 
                        -0.116518214f : 
                        0.020129643f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <170257.0f ? 
                        -0.13260399f : 
                        -0.16835016f))) : 
             (data[4 /* Ticket */] <339821.5f ? 
                 (data[4 /* Ticket */] <13163.5f ? 
                     (data[2 /* SibSp */] <0.5f ? 
                        0.16337429f : 
                        0.0044229925f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <234892.5f ? 
                        0.22745743f : 
                        0.15415972f)) : 
                 (data[4 /* Ticket */] <361395.5f ? 
                     (data[5 /* Fare */] <16.094532f ? 
                        0.020129643f : 
                        -0.09295824f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <28.553905f ? 
                        0.13423634f : 
                        -0.040763833f)))) : 
        0.2463054f);
    return pred;
  } // constant pool size = 73B, number of visited nodes = 13, static init size = 114B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_1_class_0.score0(fdata);
  }
}
class titanic_model_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <13.066563f ? 
                0.095493585f : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <32.10826f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.835024f ? 
                        -0.10768033f : 
                        0.018046282f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <170257.0f ? 
                        -0.12305904f : 
                        -0.15775985f))) : 
             (data[4 /* Ticket */] <339821.5f ? 
                 (data[4 /* Ticket */] <13163.5f ? 
                     (data[2 /* SibSp */] <0.5f ? 
                        0.14330648f : 
                        0.003977216f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <234892.5f ? 
                        0.19825198f : 
                        0.13537104f)) : 
                 (data[4 /* Ticket */] <361395.5f ? 
                     (data[5 /* Fare */] <16.094532f ? 
                        0.018046282f : 
                        -0.0854027f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <28.553905f ? 
                        0.11817119f : 
                        -0.03700072f)))) : 
        0.21436453f);
    return pred;
  } // constant pool size = 73B, number of visited nodes = 13, static init size = 114B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_2_class_0.score0(fdata);
  }
}
class titanic_model_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <13.066563f ? 
                0.08497691f : 
                 (data[1 /* Age */] <32.10826f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.835024f ? 
                        -0.09703073f : 
                        0.01618791f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <53.32617f ? 
                        -0.12311616f : 
                        -0.07581724f))) : 
             (data[4 /* Ticket */] <279263.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                     (data[4 /* Ticket */] <12314.5f ? 
                        0.12755491f : 
                        0.18371111f) : 
                     (data[4 /* Ticket */] <20065.5f ? 
                        0.0035767239f : 
                        0.12014303f)) : 
                 (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <29.375f ? 
                        0.039187174f : 
                        -0.08376217f) : 
                     (data[5 /* Fare */] <13.5375f ? 
                        0.09474804f : 
                        0.1249843f)))) : 
        0.19229837f);
    return pred;
  } // constant pool size = 78B, number of visited nodes = 13, static init size = 144B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {3, 0, 0, 0};
}


class titanic_model_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_3_class_0.score0(fdata);
  }
}
class titanic_model_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <13.066563f ? 
                0.07601758f : 
                 (data[4 /* Ticket */] <24916.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <3153.5f ? 
                        0.011760231f : 
                        -0.14996187f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        -0.08348395f : 
                        -0.12706149f))) : 
             (data[4 /* Ticket */] <279263.0f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                     (data[4 /* Ticket */] <12314.5f ? 
                        0.11471303f : 
                        0.16651772f) : 
                     (data[4 /* Ticket */] <20065.5f ? 
                        0.0032168275f : 
                        0.10853162f)) : 
                 (data[4 /* Ticket */] <367451.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <14.537109f ? 
                        0.029739702f : 
                        -0.06536862f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <28.553905f ? 
                        0.114133544f : 
                        -0.034944307f)))) : 
        0.17615175f);
    return pred;
  } // constant pool size = 73B, number of visited nodes = 13, static init size = 114B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_4_class_0.score0(fdata);
  }
}
class titanic_model_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <8.467813f ? 
                0.09251007f : 
                 (data[1 /* Age */] <32.018444f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.759623f ? 
                        -0.080509074f : 
                        0.02363119f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <53.32617f ? 
                        -0.11022203f : 
                        -0.061328452f))) : 
             (data[4 /* Ticket */] <339821.5f ? 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <29.929688f ? 
                        0.160394f : 
                        0.07519537f) : 
                     (data[4 /* Ticket */] <18237.5f ? 
                        0.0028933587f : 
                        0.09864713f)) : 
                 (data[4 /* Ticket */] <361395.5f ? 
                     (data[5 /* Fare */] <16.094532f ? 
                        0.008648301f : 
                        -0.073190354f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <28.553905f ? 
                        0.08932982f : 
                        -0.031712707f)))) : 
        0.16385254f);
    return pred;
  } // constant pool size = 73B, number of visited nodes = 13, static init size = 114B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_5_class_0.score0(fdata);
  }
}
class titanic_model_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <13.066563f ? 
                0.063733265f : 
                 (data[4 /* Ticket */] <24916.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <3153.5f ? 
                        0.01885011f : 
                        -0.13995278f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        -0.0712312f : 
                        -0.11582072f))) : 
             (data[4 /* Ticket */] <279263.0f ? 
                 (data[1 /* Age */] <36.495117f ? 
                     (data[2 /* SibSp */] <0.5f ? 
                        0.1654617f : 
                        0.08885798f) : 
                    0.027663227f) : 
                 (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <29.375f ? 
                        0.024583941f : 
                        -0.070054375f) : 
                     (data[5 /* Fare */] <13.5375f ? 
                        0.06930458f : 
                        0.10923486f)))) : 
        0.15420233f);
    return pred;
  } // constant pool size = 74B, number of visited nodes = 12, static init size = 144B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {3, 0, 0, 0};
}


class titanic_model_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_6_class_0.score0(fdata);
  }
}
class titanic_model_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <13.066563f ? 
                0.05747889f : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <32.10826f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.835024f ? 
                        -0.07567399f : 
                        0.02927404f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <170257.0f ? 
                        -0.08876788f : 
                        -0.13231114f))) : 
             (data[1 /* Age */] <42.527306f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <281020.5f ? 
                     (data[5 /* Fare */] <11.275f ? 
                        0.026631322f : 
                        0.117463544f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <13.5375f ? 
                        0.049813785f : 
                        -0.069416f)) : 
                 (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <44.44662f ? 
                        -0.087738775f : 
                        0.006450048f) : 
                    0.13205682f))) : 
        0.14645673f);
    return pred;
  } // constant pool size = 74B, number of visited nodes = 12, static init size = 144B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
}


class titanic_model_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_7_class_0.score0(fdata);
  }
}
class titanic_model_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <13.066563f ? 
                0.042652905f : 
                 (data[4 /* Ticket */] <24916.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <12.442774f ? 
                        -0.11578735f : 
                        0.04342561f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        -0.060630493f : 
                        -0.106442295f))) : 
             (data[1 /* Age */] <36.491444f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <281020.5f ? 
                     (data[2 /* SibSp */] <0.5f ? 
                        0.14693356f : 
                        0.06324394f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <13.5375f ? 
                        0.044803385f : 
                        -0.08559573f)) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <24.284374f ? 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                        0.0015515294f : 
                        0.12242236f) : 
                    -0.08449523f))) : 
         (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(100, 2, data[6]) || (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 100, 2, data[6])) ? 
                0.14012761f : 
                0.14510182f) : 
            0.11792456f));
    return pred;
  } // constant pool size = 96B, number of visited nodes = 14, static init size = 228B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00110100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 44};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {...2 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010011 00101100 11}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 52, 11};
}


class titanic_model_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_8_class_0.score0(fdata);
  }
}
class titanic_model_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <8.467813f ? 
                0.06711942f : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <26.663086f ? 
                     (data[1 /* Age */] <32.359375f ? 
                        -0.03933666f : 
                        -0.0836286f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <54.909294f ? 
                        -0.13287534f : 
                        -0.04725698f))) : 
             (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (data[4 /* Ticket */] <279263.0f ? 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.11295658f : 
                        0.031469602f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <367451.5f ? 
                        -0.014751678f : 
                        0.10340023f)) : 
                 (data[2 /* SibSp */] <0.5f ? 
                    0.1007545f : 
                    0.087036796f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
                0.1347511f : 
                0.13488081f) : 
            0.13558638f));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 13, static init size = 312B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000001 00001000 00001000 00000001 10000000 00000000 00000001 00000000 00001000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-128, 0, -128, 16, 16, -128, 1, 0, -128, 0, 16, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111011 00110100 11101011}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -65, -33, 44, -41};
}


class titanic_model_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_9_class_0.score0(fdata);
  }
}
class titanic_model_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <8.467813f ? 
                0.061010852f : 
                 (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
                     (data[1 /* Age */] <32.359375f ? 
                        -0.042961903f : 
                        -0.07825147f) : 
                    -0.1348546f)) : 
             (data[1 /* Age */] <42.527306f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <281020.5f ? 
                     (data[5 /* Fare */] <11.275f ? 
                        0.010117507f : 
                        0.096326105f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <13.5375f ? 
                        0.03934007f : 
                        -0.057239406f)) : 
                 (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <44.44662f ? 
                        -0.0821238f : 
                        0.006551071f) : 
                    0.109732985f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
                0.13034487f : 
                0.13047956f) : 
            0.13097869f));
    return pred;
  } // constant pool size = 106B, number of visited nodes = 13, static init size = 312B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {00000001 00000000 00000001 00001000 00001000 00000001 10000000 00000000 00000001 00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-128, 0, -128, 16, 16, -128, 1, 0, -128, 64, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110011 00110100 11101011}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -49, 44, -41};
}


class titanic_model_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_10_class_0.score0(fdata);
  }
}
class titanic_model_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <13.066563f ? 
                0.03367999f : 
                 (data[1 /* Age */] <19.493135f ? 
                     (!Double.isNaN(data[4]) ? 
                        -0.13045165f : 
                        -0.014509176f) : 
                     (data[1 /* Age */] <32.26818f ? 
                        -0.02904508f : 
                        -0.07570144f))) : 
             (data[1 /* Age */] <36.491444f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <281020.5f ? 
                     (data[2 /* SibSp */] <0.5f ? 
                        0.13097556f : 
                        0.04538528f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <13.5375f ? 
                        0.03545947f : 
                        -0.074808285f)) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <24.284374f ? 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                        -0.0028337257f : 
                        0.102876045f) : 
                    -0.07693362f))) : 
         (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(100, 2, data[6]) || (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 100, 2, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 100, 2, data[6])) ? 
                    0.1266365f : 
                    0.1267505f) : 
                0.1316177f) : 
            0.10369502f));
    return pred;
  } // constant pool size = 112B, number of visited nodes = 15, static init size = 312B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00110100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 44};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {...2 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01110111 01000000 00000000 10}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, -18, 2, 0, 1};
  // {...2 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11001100 11010011 10}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -53, 5};
}


class titanic_model_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_11_class_0.score0(fdata);
  }
}
class titanic_model_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <9.904922f ? 
                0.04469913f : 
                 (data[4 /* Ticket */] <24916.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <3153.5f ? 
                        0.04335768f : 
                        -0.12641558f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                        -0.043183006f : 
                        -0.092657134f))) : 
             (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <32.020576f ? 
                     (data[5 /* Fare */] <10.106249f ? 
                        -0.0020228308f : 
                        0.052559435f) : 
                    -0.061894573f) : 
                 (data[2 /* SibSp */] <0.5f ? 
                    0.08692341f : 
                    0.07062694f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
                0.123455256f : 
                0.12356572f) : 
            0.12452431f));
    return pred;
  } // constant pool size = 102B, number of visited nodes = 12, static init size = 312B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000001 00001000 00001000 00000001 10000000 00000000 00000001 01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-128, 0, -128, 16, 16, -128, 1, 0, -128, 2, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11100010 00101011 00110100 11101011}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -44, 44, -41};
}


class titanic_model_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_12_class_0.score0(fdata);
  }
}
class titanic_model_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[4 /* Ticket */] <12804.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                     (data[1 /* Age */] <27.242813f ? 
                        -0.035349574f : 
                        -0.13141379f) : 
                    0.10832836f) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <26.663086f ? 
                     (data[1 /* Age */] <16.835938f ? 
                        0.079539746f : 
                        -0.04884787f) : 
                     (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                        -0.15111054f : 
                        -0.08664922f))) : 
             (data[1 /* Age */] <42.527306f ? 
                 (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <293125.0f ? 
                        0.05291906f : 
                        -0.008362979f) : 
                    0.11433262f) : 
                 (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[7])) ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <44.44662f ? 
                        -0.07643318f : 
                        0.0048416397f) : 
                    0.096091144f))) : 
         (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(100, 2, data[6]) || (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 100, 2, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 100, 2, data[6])) ? 
                    0.12073119f : 
                     (data[4 /* Ticket */] <170000.5f ? 
                        0.12082626f : 
                        0.12082509f)) : 
                0.12553637f) : 
            0.09538719f));
    return pred;
  } // constant pool size = 132B, number of visited nodes = 17, static init size = 372B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00110100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 44};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {...2 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111100 11110000 00000000 00000000 00000000 10}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 0, 60, 15, 0, 0, 0, 1};
  // {...2 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10001000 10101100 11010011 10}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 53, -53, 5};
}


class titanic_model_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_13_class_0.score0(fdata);
  }
}
class titanic_model_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <8.467813f ? 
                0.04990437f : 
                 (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <32.359375f ? 
                        -0.034835983f : 
                        -0.07563612f) : 
                    -0.12824051f)) : 
             (data[1 /* Age */] <7.8929687f ? 
                0.083774604f : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <365749.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <340217.5f ? 
                        0.029393641f : 
                        -0.066343926f) : 
                    0.10289111f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
                    0.11837049f : 
                    0.11837506f) : 
                 (data[4 /* Ticket */] <24916.5f ? 
                    0.11845622f : 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(83, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 83, 2, data[6])) ? 
                        0.11845336f : 
                        0.11845684f))) : 
            0.11964056f));
    return pred;
  } // constant pool size = 127B, number of visited nodes = 13, static init size = 438B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000001 00001000 00001000 00000001 10000000 00100000 00000001 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-128, 0, -128, 16, 16, -128, 1, 4, -128, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110000 11000011 11100010 00101011 00110100 11101011}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, 15, -61, 71, -44, 44, -41};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010100 11001011 00010100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, -45, 40};
  // {...2 0-bits... 11101111 11011101 11110110 11111111 11111111 11111111 11111111 11111111 11111110 11110111 1}
  public static final byte[] GRPSPLIT5 = new byte[] {-9, -69, 111, -1, -1, -1, -1, -1, 127, -17, 7};
}


class titanic_model_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_14_class_0.score0(fdata);
  }
}
class titanic_model_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
                    -0.12273765f : 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
                        -0.11809532f : 
                        -0.11584956f)) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <54.03472f ? 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <1.5f ? 
                        -0.031206796f : 
                        -0.122499354f) : 
                    0.08551395f)) : 
             (data[1 /* Age */] <42.527306f ? 
                 (data[5 /* Fare */] <10.14375f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <7.810547f ? 
                        0.030364966f : 
                        -0.075784914f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <317354.5f ? 
                        0.076937184f : 
                        -0.0050459616f)) : 
                 (data[5 /* Fare */] <12.40625f ? 
                    0.05485522f : 
                    -0.06170118f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 104, 0, data[6])) ? 
                 (data[5 /* Fare */] <34.021862f ? 
                    0.116320886f : 
                    0.11632163f) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 104, 0, data[6])) ? 
                    0.11638898f : 
                    0.11639504f)) : 
            0.11733759f));
    return pred;
  } // constant pool size = 169B, number of visited nodes = 16, static init size = 618B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {11101111 01111111 11101111 11101111 11111111 01111011 11111111 10111111 01111111 11111111 11111101 11011111 10110111}
  public static final byte[] GRPSPLIT3 = new byte[] {-9, -2, -9, -9, -1, -34, -1, -3, -2, -1, -65, -5, -19};
  // {10111101 11111110 11111111 11111111 10111111 11111101 11010101 11101111 10111111 11111111 11011111 11111111 01111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-67, 127, -1, -1, -3, -65, -85, -9, -3, -1, -5, -1, -2};
  // {00000001 00000000 00000001 01001000 00001000 00000001 10000000 00000000 00000001 00000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-128, 0, -128, 18, 16, -128, 1, 0, -128, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110000 11000011 11100010 00101011 00110100 11101011}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, 15, -61, 71, -44, 44, -41};
  // {11111111 11111111 11111111 11111011 11011111 11101111 11111111 11011111 11111111 10111101 11110111 11111111 11111111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -33, -5, -9, -1, -5, -1, -67, -17, -1, -1};
}


class titanic_model_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_15_class_0.score0(fdata);
  }
}
class titanic_model_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (data[1 /* Age */] <9.904922f ? 
                0.038276564f : 
                 (data[1 /* Age */] <19.669407f ? 
                     (!Double.isNaN(data[4]) ? 
                        -0.10827218f : 
                        0.002062461f) : 
                     (data[1 /* Age */] <32.40314f ? 
                        -0.011594883f : 
                        -0.059085686f))) : 
             (data[1 /* Age */] <36.491444f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <244708.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <27.46289f ? 
                        0.03729749f : 
                        0.13648613f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <13.5375f ? 
                        0.036869198f : 
                        -0.059763297f)) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <26834.5f ? 
                     (data[5 /* Fare */] <12.581055f ? 
                        0.0428716f : 
                        -0.10886675f) : 
                     (data[5 /* Fare */] <14.041797f ? 
                        -0.0012435488f : 
                        0.07971301f)))) : 
         (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(100, 2, data[6]) || (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 100, 2, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 100, 2, data[6])) ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <29.578125f ? 
                        0.11453002f : 
                        0.11452846f) : 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 100, 2, data[6])) ? 
                        0.11458553f : 
                        0.1145936f)) : 
                0.12002044f) : 
            0.08541181f));
    return pred;
  } // constant pool size = 133B, number of visited nodes = 18, static init size = 366B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00110100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 44};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {...2 0-bits... 00010000 00100010 00001000 00010000 10000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 10}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 68, 16, 8, 1, 2, 0, 0, 0, 0, 0, 0, 1};
  // {...2 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11000011 00001111 10001000 10101100 11010011 10}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -61, -16, 17, 53, -53, 5};
  // {...2 0-bits... 01011111 11111111 11111110 11111111 11111111 11111111 11111111 01111111 11111110 11110111 11011111 11111111 11}
  public static final byte[] GRPSPLIT4 = new byte[] {-6, -1, 127, -1, -1, -1, -1, -2, 127, -17, -5, -1, 15};
}


class titanic_model_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_16_class_0.score0(fdata);
  }
}
class titanic_model_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
            -0.1749969f : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                -0.1163497f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
                    -0.114091255f : 
                    -0.08994859f))) : 
         (data[1 /* Age */] <5.449883f ? 
             (data[5 /* Fare */] <20.01286f ? 
                0.16141252f : 
                0.07817679f) : 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <50.03215f ? 
                 (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(98, 2, data[6]) || (GenModel.bitSetIsInRange(98, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 98, 2, data[6])) ? 
                        -0.03802652f : 
                        0.112960845f) : 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                        0.04506354f : 
                        -0.01619864f)) : 
                 (data[5 /* Fare */] <60.867237f ? 
                    0.17267336f : 
                     (data[5 /* Fare */] <74.975426f ? 
                        -0.028862206f : 
                        0.116056f)))));
    return pred;
  } // constant pool size = 125B, number of visited nodes = 12, static init size = 450B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00110100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 44};
  // {11101111 01111111 11111111 11111111 11101111 10111011 11111111 11111111 01111111 11111111 11111111 11011011 10110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -2, -1, -1, -9, -35, -1, -1, -2, -1, -1, -37, -19};
  // {11111111 11111110 11101111 11101111 11111111 01111101 11011101 10111111 11111111 11111111 11011101 11111111 01111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 127, -9, -9, -1, -66, -69, -3, -1, -1, -69, -1, -2};
  // {00000000 01000100 00000000 00000001 00000100 00000000 00000000 00000000 00000010 00100000 00000000 00010000 00000011}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 34, 0, -128, 32, 0, 0, 0, 64, 4, 0, 8, -64};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {...2 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, 2};
}


class titanic_model_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_17_class_0.score0(fdata);
  }
}
class titanic_model_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                -0.16790222f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
                    -0.11435349f : 
                    -0.09609679f)) : 
             (data[1 /* Age */] <5.881016f ? 
                 (data[5 /* Fare */] <19.552929f ? 
                    0.15250206f : 
                    0.065826155f) : 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <3.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <53.32617f ? 
                        -0.01256482f : 
                        0.11994133f) : 
                    -0.12504902f))) : 
         (data[1 /* Age */] <24.563438f ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(100, 2, data[6]) || (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 100, 2, data[6])) ? 
                0.11199663f : 
                0.115392625f) : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 100, 2, data[6])) ? 
                0.084738076f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(100, 2, data[6]) || (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 100, 2, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(100, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 100, 2, data[6])) ? 
                        0.11154499f : 
                        0.11158455f) : 
                    0.11275046f))));
    return pred;
  } // constant pool size = 166B, number of visited nodes = 13, static init size = 672B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 40};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4};
  // {11101111 11111111 11101111 11101111 11101111 10111111 11111111 10111111 01111111 11111111 11111111 11111011 10110111}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, -1, -9, -9, -9, -3, -1, -3, -2, -1, -1, -33, -19};
  // {11111111 01111110 11111111 11111111 11111111 01111001 11010101 11111111 11111111 11111111 11011101 11011111 01111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 126, -1, -1, -1, -98, -85, -1, -1, -1, -69, -5, -2};
  // {...2 0-bits... 00000100 00000000 10000000 00000000 10100000 00000010 00000000 01100000 00000100 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT4 = new byte[] {32, 0, 1, 0, 5, 64, 0, 6, 32, 0, 0, 0, 0};
  // {...2 0-bits... 11111111 11011101 11111111 11111101 11111111 11111111 11111111 10111111 10111111 11111111 10111110 11110111 11}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -69, -1, -65, -1, -1, -1, -3, -3, -1, 125, -17, 15};
  // {...2 0-bits... 10000000 00000000 00100000 00100000 00000000 00000100 01000000 00001000 00000000 00001000 00000000 00000100 00}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 4, 4, 0, 32, 2, 16, 0, 16, 0, 32, 0};
  // {...2 0-bits... 11101111 11111111 11111111 11101111 11111111 10111111 11111111 11101011 01011111 11011111 11101101 11011111 11}
  public static final byte[] GRPSPLIT7 = new byte[] {-9, -1, -1, -9, -1, -3, -1, -41, -6, -5, -73, -5, 15};
}


class titanic_model_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_18_class_0.score0(fdata);
  }
}
class titanic_model_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
             (data[4 /* Ticket */] <12804.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <10.665235f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <20.28875f ? 
                        -0.024886398f : 
                        -0.1248883f) : 
                    0.10904116f) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <26.663086f ? 
                     (data[1 /* Age */] <16.835938f ? 
                        0.07225752f : 
                        -0.031778693f) : 
                     (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                        -0.14537671f : 
                        -0.06998489f))) : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <36.204025f ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(98, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 98, 4, data[6])) ? 
                    0.11028276f : 
                    0.11564197f) : 
                0.07058967f)) : 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
            -0.07380457f : 
             (data[1 /* Age */] <7.8929687f ? 
                0.112612545f : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <49.438503f ? 
                     (Double.isNaN(data[3]) || data[3 /* Parch */] <0.5f ? 
                        0.038946f : 
                        -0.018905174f) : 
                    0.1553951f))));
    return pred;
  } // constant pool size = 110B, number of visited nodes = 14, static init size = 312B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001101 00010000 00000100 00001110 10000000 00010000 10000001 10001000 00010100 01010101 11000000 01000010 00100100}
  public static final byte[] GRPSPLIT1 = new byte[] {-80, 8, 32, 112, 1, 8, -127, 17, 40, -86, 3, 66, 36};
  // {00100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 10111110 10101011 11111011 110111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, 127, -1, -1, -1, 125, -43, -33, -5, 3};
  // {11111111 11110101 11111111 11111111 11101111 10111111 11111111 11111111 11101111 11111111 11101111 11111011 11111101}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -81, -1, -1, -9, -3, -1, -1, -9, -1, -9, -33, -65};
}


class titanic_model_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_19_class_0.score0(fdata);
  }
}
class titanic_model_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                -0.15815517f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
                    -0.11197941f : 
                    -0.1102232f)) : 
             (data[1 /* Age */] <5.881016f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <242927.5f ? 
                    0.1377355f : 
                    0.027283961f) : 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <3.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <53.32617f ? 
                        -0.010261473f : 
                        0.107508875f) : 
                    -0.11284675f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 104, 0, data[6])) ? 
                0.10913039f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 104, 0, data[6])) ? 
                    0.1096647f : 
                    0.11000979f)) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 104, 0, data[6])) ? 
                0.11062352f : 
                0.11164649f)));
    return pred;
  } // constant pool size = 162B, number of visited nodes = 12, static init size = 672B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00100010}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 68};
  // {11101111 11111111 11101111 11101111 11101111 00111111 11111111 11111111 11111111 11111111 11111111 11011011 10110111}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, -1, -9, -9, -9, -4, -1, -1, -1, -1, -1, -37, -19};
  // {11111111 01111110 11111111 11111111 11111111 11111011 11011101 10111111 01111111 11111111 11011101 11111111 01111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 126, -1, -1, -1, -33, -69, -3, -2, -1, -69, -1, -2};
  // {00100001 00001010 01101011 00000000 00101000 00000001 00010100 00001010 00000001 00000010 00011000 10001001 00010000}
  public static final byte[] GRPSPLIT4 = new byte[] {-124, 80, -42, 0, 20, -128, 40, 80, -128, 64, 24, -111, 8};
  // {11111111 11101111 11111111 01111101 01111111 11001111 11111111 11111110 11110011 10100010 10111111 10111101 11111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -9, -1, -66, -2, -13, -1, 127, -49, 69, -3, -67, -1};
  // {11110011 11111111 01111011 11111011 11111111 11111111 11111110 01111111 11111111 11111111 01111111 11111111 11111011}
  public static final byte[] GRPSPLIT6 = new byte[] {-49, -1, -34, -33, -1, -1, 127, -2, -1, -1, -2, -1, -33};
  // {00100000 00000000 00100001 00000000 00101000 00000001 00010000 00000000 00000001 00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, -124, 0, 20, -128, 8, 0, -128, 0, 0, -128, 0};
}


class titanic_model_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_20_class_0.score0(fdata);
  }
}
class titanic_model_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
             (data[1 /* Age */] <9.904922f ? 
                0.035736505f : 
                 (data[1 /* Age */] <19.669407f ? 
                     (!Double.isNaN(data[4]) ? 
                        -0.10176215f : 
                        0.009196047f) : 
                     (data[1 /* Age */] <32.40314f ? 
                        -0.0019243668f : 
                        -0.049033333f))) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                0.10829689f : 
                0.108900025f)) : 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
            -0.07028827f : 
             (data[1 /* Age */] <7.8929687f ? 
                0.10029769f : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <365749.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <340217.5f ? 
                        0.037535805f : 
                        -0.06250448f) : 
                    0.09297335f))));
    return pred;
  } // constant pool size = 91B, number of visited nodes = 11, static init size = 282B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001101 00010000 00000100 00001110 10000000 00010000 10000001 10001000 00010100 01010101 11000000 01000010 00000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-80, 8, 32, 112, 1, 8, -127, 17, 40, -86, 3, 66, 32};
  // {00001101 00000000 00000100 00001100 00000000 00000000 10000001 10001000 00000000 00000000 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-80, 0, 32, 48, 0, 0, -127, 17, 0, 0, 1, 0, 0};
  // {11111111 11111111 11111111 01111111 11101111 10011111 11111111 11111110 11110111 11110111 11111111 11111011 11111101}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -2, -9, -7, -1, 127, -17, -17, -1, -33, -65};
}


class titanic_model_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_21_class_0.score0(fdata);
  }
}
class titanic_model_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
            -0.15008312f : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                -0.1101233f : 
                -0.108716704f)) : 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
             (data[1 /* Age */] <6.455859f ? 
                0.083874784f : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <52.033436f ? 
                     (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(95, 4, data[6]) || (GenModel.bitSetIsInRange(95, 4, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 95, 4, data[6])) ? 
                        -0.028496895f : 
                        0.10755678f) : 
                     (!Double.isNaN(data[4]) ? 
                        0.16743903f : 
                        -0.020303518f))) : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <49.56914f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <365749.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <283479.5f ? 
                        0.03518645f : 
                        -0.032754198f) : 
                    0.085732855f) : 
                0.1461727f)));
    return pred;
  } // constant pool size = 104B, number of visited nodes = 11, static init size = 360B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00110110}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 108};
  // {11101111 01111111 11101111 11111111 11101111 10111011 11111111 11111111 01111111 11111111 11111101 11011011 11111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -2, -9, -1, -9, -35, -1, -1, -2, -1, -65, -37, -1};
  // {11111111 11111110 11111111 11101111 11111111 01111111 11011101 10111111 11111111 11111111 11011111 11111111 00110111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 127, -1, -9, -1, -2, -69, -3, -1, -1, -5, -1, -20};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {...4 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, 63};
}


class titanic_model_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_22_class_0.score0(fdata);
  }
}
class titanic_model_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                -0.14536375f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
                    -0.10903114f : 
                    -0.107819125f)) : 
             (data[1 /* Age */] <5.881016f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <242927.5f ? 
                    0.12910254f : 
                    0.018468946f) : 
                 (data[1 /* Age */] <11.468902f ? 
                    -0.08660257f : 
                     (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.019818714f : 
                        0.018570755f)))) : 
         (!Double.isNaN(data[0 /* Sex */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 104, 0, data[6])) ? 
                0.069508806f : 
                0.10709677f) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 104, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 104, 0, data[6])) ? 
                    0.10796067f : 
                    0.108927354f) : 
                0.11183076f)));
    return pred;
  } // constant pool size = 158B, number of visited nodes = 12, static init size = 648B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 40};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100010}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68};
  // {11101111 11111111 11101111 11111111 11101111 10111111 11111111 10111111 01111111 11111111 11111111 11011011 10110111}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, -1, -9, -1, -9, -3, -1, -3, -2, -1, -1, -37, -19};
  // {11111111 01111110 11111111 11101111 11111111 01111011 11011101 11111111 11111111 11111111 11011101 11111111 01111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 126, -1, -9, -1, -34, -69, -1, -1, -1, -69, -1, -2};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11111111 11111111 11111011 11111101 11111111 11101111 11111110 01101111 11101111 11111111 11111111 10111101 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -33, -65, -1, -9, 127, -10, -9, -1, -1, -67, -1};
  // {00000000 00000000 00100001 00000000 00001000 00000001 00010000 00010000 00000001 00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, -124, 0, 16, -128, 8, 8, -128, 0, 0, -128, 0};
  // {00100000 00001010 01001010 00000000 00100000 00000000 00000100 00000010 00010000 00000010 00011000 10001000 00010000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 80, 82, 0, 4, 0, 32, 64, 8, 64, 24, 17, 8};
}


class titanic_model_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_23_class_0.score0(fdata);
  }
}
class titanic_model_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                -0.14103413f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
                    -0.10781966f : 
                    -0.106815174f)) : 
             (data[1 /* Age */] <5.881016f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <242927.5f ? 
                    0.12563139f : 
                    0.01665612f) : 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <3.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <53.32617f ? 
                        -0.007838419f : 
                        0.09366111f) : 
                    -0.1067871f))) : 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 104, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 104, 0, data[6])) ? 
                    0.105984494f : 
                    0.106226414f) : 
                0.10678273f) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 104, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 104, 0, data[6])) ? 
                    0.10744146f : 
                    0.10792973f) : 
                0.108665384f)));
    return pred;
  } // constant pool size = 180B, number of visited nodes = 13, static init size = 756B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00100010}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 68};
  // {11101111 01111111 11101111 11101111 11101111 10111111 11111111 11111111 01111111 11111111 11111101 11011011 11111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, -2, -9, -9, -9, -3, -1, -1, -2, -1, -65, -37, -1};
  // {10000000 01100100 00000000 00000001 00000100 00000000 00001000 00000000 01000010 10100000 00000000 00010000 00000001}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 38, 0, -128, 32, 0, 16, 0, 66, 5, 0, 8, -128};
  // {11110010 11101111 01111011 01110001 01111111 11001111 01111110 01111110 11100011 10100010 00111111 10111101 11111011}
  public static final byte[] GRPSPLIT4 = new byte[] {79, -9, -34, -114, -2, -13, 126, 126, -57, 69, -4, -67, -33};
  // {00000001 00010000 10000000 10000000 00000000 00100000 00000000 10000001 00011000 01001000 00000000 00000000 00000100}
  public static final byte[] GRPSPLIT5 = new byte[] {-128, 8, 1, 1, 0, 4, 0, -127, 24, 18, 0, 0, 32};
  // {00001100 00000000 00000000 00001110 00000000 00010000 10000000 00000000 00000000 00000001 10000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {48, 0, 0, 112, 0, 8, 1, 0, 0, -128, 1, 0, 0};
  // {00100000 00000000 00100001 00000000 00101000 00000001 00010000 00000000 00000001 00000000 00000000 00000001 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, -124, 0, 20, -128, 8, 0, -128, 0, 0, -128, 0};
  // {11111111 11111111 11111111 10011111 11111100 11110111 11111111 11011011 11011111 11111111 11111011 11111111 11111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -7, 63, -17, -1, -37, -5, -1, -33, -1, -1};
}


class titanic_model_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_24_class_0.score0(fdata);
  }
}
class titanic_model_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (data[4 /* Ticket */] <6748.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <10.00643f ? 
                -0.055417277f : 
                0.12298337f) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
                 (data[4 /* Ticket */] <55101.5f ? 
                     (data[5 /* Fare */] <17.77539f ? 
                        -0.116474085f : 
                        -0.0861208f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <28.440624f ? 
                        -0.009616213f : 
                        -0.08213535f)) : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                    0.10545242f : 
                    0.10595887f))) : 
         (Double.isNaN(data[1]) || data[1 /* Age */] <3.4379296f ? 
             (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                -0.08283758f : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <12.755859f ? 
                    0.08438687f : 
                    -0.014713093f)) : 
             (data[5 /* Fare */] <9.75293f ? 
                -0.018657232f : 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(101, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 101, 2, data[6])) ? 
                        0.06070125f : 
                        0.08879256f) : 
                     (data[5 /* Fare */] <21.692577f ? 
                        -0.05670812f : 
                        0.05159348f)))));
    return pred;
  } // constant pool size = 114B, number of visited nodes = 15, static init size = 312B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001101 00010000 00000100 00001110 10000000 00010000 10000001 10001000 00010100 01010101 11000000 01000010 00000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-80, 8, 32, 112, 1, 8, -127, 17, 40, -86, 3, 66, 32};
  // {00001101 00010000 00000000 00000110 00000000 00000000 00000000 00001000 00000000 01000000 10000000 00000000 00000100}
  public static final byte[] GRPSPLIT2 = new byte[] {-80, 8, 0, 96, 0, 0, 0, 16, 0, 2, 1, 0, 32};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {3, 0, 0, 0};
  // {...2 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 16};
}


class titanic_model_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_25_class_0.score0(fdata);
  }
}
class titanic_model_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (data[1 /* Age */] <5.9528713f ? 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <73363.5f ? 
                0.12360429f : 
                0.0039387913f) : 
             (data[1 /* Age */] <11.4019575f ? 
                -0.07508939f : 
                 (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[7])) ? 
                        -0.02617501f : 
                        0.037463848f) : 
                     (data[1 /* Age */] <36.832413f ? 
                        0.032269116f : 
                        -0.01472704f)))) : 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
             (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 104, 0, data[6])) ? 
                    0.104888156f : 
                    0.10520496f) : 
                0.105899826f) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 104, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 104, 0, data[6])) ? 
                    0.10629462f : 
                    0.106717415f) : 
                0.10739035f)));
    return pred;
  } // constant pool size = 135B, number of visited nodes = 12, static init size = 510B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {11110010 11101111 01111011 01110001 01111111 11001111 01111110 01111110 11100011 10100010 00111111 10111101 11111011}
  public static final byte[] GRPSPLIT3 = new byte[] {79, -9, -34, -114, -2, -13, 126, 126, -57, 69, -4, -67, -33};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00001101 00010000 00000000 00000110 00000000 00010000 00000000 00000000 00000000 01000000 10000000 00000000 00000100}
  public static final byte[] GRPSPLIT5 = new byte[] {-80, 8, 0, 96, 0, 8, 0, 0, 0, 2, 1, 0, 32};
  // {00100000 00000000 00100001 00000000 00101000 00000001 00010000 00000000 00000001 00000000 00010000 00000001 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, -124, 0, 20, -128, 8, 0, -128, 0, 8, -128, 0};
  // {11111111 11111111 11111111 10111111 11111100 11110111 11111111 11010011 11011111 11111111 11111011 11111111 11111111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -3, 63, -17, -1, -53, -5, -1, -33, -1, -1};
}


class titanic_model_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_26_class_0.score0(fdata);
  }
}
class titanic_model_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
            -0.13623253f : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                -0.10629676f : 
                -0.069195844f)) : 
         (data[1 /* Age */] <5.449883f ? 
             (data[5 /* Fare */] <20.01286f ? 
                0.130816f : 
                0.033128954f) : 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <50.03215f ? 
                 (data[1 /* Age */] <11.578125f ? 
                    -0.06559712f : 
                     (data[4 /* Ticket */] <339821.5f ? 
                        0.014299908f : 
                        -0.016711712f)) : 
                 (data[5 /* Fare */] <60.867237f ? 
                    0.13693947f : 
                     (data[5 /* Fare */] <74.975426f ? 
                        -0.047560457f : 
                        0.105190895f)))));
    return pred;
  } // constant pool size = 84B, number of visited nodes = 10, static init size = 252B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00110100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 44};
  // {11101111 01111111 11111111 11101111 11101111 10111111 11111111 11111111 11111111 11111111 11111111 11011011 00110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -2, -1, -9, -9, -3, -1, -1, -1, -1, -1, -37, -20};
  // {10000000 01100100 00000000 00000001 00000100 00000000 00001000 00000000 01000010 10100000 00000000 00010000 00000011}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 38, 0, -128, 32, 0, 16, 0, 66, 5, 0, 8, -64};
}


class titanic_model_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_27_class_0.score0(fdata);
  }
}
class titanic_model_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
            -0.13272586f : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                -0.10581417f : 
                -0.10520457f)) : 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <339821.5f ? 
             (data[1 /* Age */] <8.467813f ? 
                0.13261701f : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <11.643275f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <5927.5f ? 
                        -0.06687598f : 
                        0.0760669f) : 
                     (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                        0.005902794f : 
                        0.07156583f))) : 
             (data[1 /* Age */] <20.539532f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <16.298634f ? 
                     (data[1 /* Age */] <17.476562f ? 
                        0.05030659f : 
                        -0.111920744f) : 
                    -0.10788842f) : 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                     (data[1 /* Age */] <32.59375f ? 
                        0.034544665f : 
                        -0.10407329f) : 
                     (data[5 /* Fare */] <16.061718f ? 
                        0.014319782f : 
                        0.1255546f)))));
    return pred;
  } // constant pool size = 105B, number of visited nodes = 14, static init size = 282B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00110110}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 108};
  // {11101111 01111111 11101111 11111111 11101111 10111111 11111111 11111111 11111111 11111111 11111111 11011011 00110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -2, -9, -1, -9, -3, -1, -1, -1, -1, -1, -37, -20};
  // {11111111 11111110 11111111 11101111 11111111 01111011 11011101 10111111 01111111 11111111 11011101 11111111 11111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 127, -1, -9, -1, -34, -69, -3, -2, -1, -69, -1, -1};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_28_class_0.score0(fdata);
  }
}
class titanic_model_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[2]) || data[2 /* SibSp */] <2.5f ? 
             (data[1 /* Age */] <8.467813f ? 
                 (data[1 /* Age */] <2.5262635f ? 
                    0.03963177f : 
                    0.13401073f) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                        -0.1181708f : 
                        -0.104878046f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <53.32617f ? 
                        -0.00798171f : 
                        0.0792976f))) : 
             (data[1 /* Age */] <15.078516f ? 
                -0.09897087f : 
                -0.004860303f)) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 104, 0, data[6])) ? 
                    0.10384778f : 
                    0.10425376f) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 104, 0, data[6])) ? 
                    0.10453808f : 
                    0.10489713f)) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 104, 0, data[6])) ? 
                0.1056454f : 
                0.10644685f)));
    return pred;
  } // constant pool size = 166B, number of visited nodes = 13, static init size = 672B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000010}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 64};
  // {11101111 11111111 11101111 11101111 11111111 10111011 11111111 11111111 11111111 11111111 11111111 11011011 01010111}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, -1, -9, -9, -1, -35, -1, -1, -1, -1, -1, -37, -22};
  // {00100000 00000010 01101011 00100000 00101000 00000001 00010100 00001010 00000001 00000010 00010000 00001001 00010000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 64, -42, 4, 20, -128, 40, 80, -128, 64, 8, -112, 8};
  // {00000000 00001000 00000000 01000100 00000011 00001000 00000000 10100100 00110000 00001101 11001100 10000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 16, 0, 34, -64, 16, 0, 37, 12, -80, 51, 1, 0};
  // {11111111 11111111 11111011 11110111 01111111 11111111 01111110 11111111 11111011 11111111 11111111 10111101 11111011}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -33, -17, -2, -1, 126, -1, -33, -1, -1, -67, -33};
  // {11111111 11111111 11111111 11111011 11111111 11111111 11111111 01111111 11101111 11110010 00111111 11111111 11111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -33, -1, -1, -1, -2, -9, 79, -4, -1, -1};
  // {00100000 00000000 00100010 00000000 00100000 00000000 00010000 00000010 00000001 00000000 00000000 00000001 00010000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 68, 0, 4, 0, 8, 64, -128, 0, 0, -128, 8};
}


class titanic_model_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_29_class_0.score0(fdata);
  }
}
class titanic_model_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (data[4 /* Ticket */] <6748.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <10.00643f ? 
                -0.055536684f : 
                0.108702675f) : 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <369391.5f ? 
                 (data[1 /* Age */] <9.97625f ? 
                    0.12114639f : 
                     (data[1 /* Age */] <23.981445f ? 
                        -0.053124934f : 
                        -0.01435377f)) : 
                -0.083710685f)) : 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <370100.5f ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <344444.5f ? 
                     (data[1 /* Age */] <22.3125f ? 
                        0.13618389f : 
                        0.043749515f) : 
                    -0.037419915f) : 
                 (data[5 /* Fare */] <16.759766f ? 
                    -0.09684107f : 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
                        -0.017665768f : 
                        0.12579785f))) : 
            0.0689997f));
    return pred;
  } // constant pool size = 60B, number of visited nodes = 12, static init size = 60B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {3, 0, 0, 0};
}


class titanic_model_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_30_class_0.score0(fdata);
  }
}
class titanic_model_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (Double.isNaN(data[1]) || data[1 /* Age */] <20.036543f ? 
            -0.14355232f : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                    -0.11559358f : 
                    -0.10440163f) : 
                -0.0014973382f)) : 
         (data[1 /* Age */] <5.449883f ? 
             (data[5 /* Fare */] <20.01286f ? 
                0.12438205f : 
                0.030687759f) : 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <3.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <52.033436f ? 
                     (data[1 /* Age */] <35.75f ? 
                        0.0069235573f : 
                        -0.020474518f) : 
                     (data[5 /* Fare */] <66.41768f ? 
                        0.11927103f : 
                        0.0640478f)) : 
                -0.08910736f)));
    return pred;
  } // constant pool size = 84B, number of visited nodes = 10, static init size = 252B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00110100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 44};
  // {10000000 01100000 00000000 00000000 00000000 00000000 00001000 00000000 00000010 10100000 00000000 00010000 00000011}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 6, 0, 0, 0, 0, 16, 0, 64, 5, 0, 8, -64};
  // {11101111 01111110 11101111 11101111 11111111 00111111 11111111 11111111 11111111 11111111 11111111 11011011 01111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, 126, -9, -9, -1, -4, -1, -1, -1, -1, -1, -37, -2};
}


class titanic_model_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_31_class_0.score0(fdata);
  }
}
class titanic_model_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (data[4 /* Ticket */] <6748.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <10.00643f ? 
                -0.05277165f : 
                0.094607845f) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
                 (data[4 /* Ticket */] <55101.5f ? 
                     (data[5 /* Fare */] <17.77539f ? 
                        -0.1142364f : 
                        -0.08896354f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <28.440624f ? 
                        -0.0017471206f : 
                        -0.07390507f)) : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                    0.10328738f : 
                    0.10407935f))) : 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <370100.5f ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <344444.5f ? 
                     (data[1 /* Age */] <22.3125f ? 
                        0.13243628f : 
                        0.04102865f) : 
                    -0.034723062f) : 
                 (data[5 /* Fare */] <16.759766f ? 
                    -0.088147104f : 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                        -0.015589241f : 
                        0.12248886f))) : 
            0.06507988f));
    return pred;
  } // constant pool size = 96B, number of visited nodes = 14, static init size = 228B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {00001101 00010000 00000100 00001110 10000000 00010000 10000001 10001000 00010100 01010101 11000000 01000010 00000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-80, 8, 32, 112, 1, 8, -127, 17, 40, -86, 3, 66, 32};
  // {00001100 00000000 00000000 00000110 00000000 00010000 00000000 00001000 00000100 00010101 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {48, 0, 0, 96, 0, 8, 0, 16, 32, -88, 3, 0, 0};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {3, 0, 0, 0};
}


class titanic_model_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_32_class_0.score0(fdata);
  }
}
class titanic_model_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
            -0.1270119f : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                -0.10383296f : 
                -0.10350294f)) : 
         (data[4 /* Ticket */] <236871.5f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <22.014145f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <20.53711f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <12.702656f ? 
                        0.06894878f : 
                        -0.047201823f) : 
                     (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.090792574f : 
                        0.02864797f)) : 
                 (data[5 /* Fare */] <28.603601f ? 
                     (data[4 /* Ticket */] <111393.5f ? 
                        0.053909216f : 
                        0.17403075f) : 
                     (data[4 /* Ticket */] <15453.5f ? 
                        0.13674632f : 
                        0.07241196f))) : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <49.56914f ? 
                 (data[1 /* Age */] <31.482351f ? 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <1.5f ? 
                        0.020942135f : 
                        -0.07478235f) : 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <282412.5f ? 
                        -0.07590634f : 
                        -0.007404309f)) : 
                0.07493248f)));
    return pred;
  } // constant pool size = 109B, number of visited nodes = 15, static init size = 282B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00110110}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 108};
  // {11101111 01111111 11111111 11101111 11101111 10111111 11111111 11111111 11111111 11111111 11111111 11001011 01110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -2, -1, -9, -9, -3, -1, -1, -1, -1, -1, -45, -18};
  // {11111111 11111110 11101111 11111111 11111111 01111111 11010101 10111111 11111101 11011111 11011101 11111111 10111110}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, 127, -9, -1, -1, -2, -85, -3, -65, -5, -69, -1, 125};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_33_class_0.score0(fdata);
  }
}
class titanic_model_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (data[1 /* Age */] <35.48547f ? 
             (!Double.isNaN(data[7 /* Embarked */]) && (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
                -0.05406405f : 
                 (data[1 /* Age */] <8.501495f ? 
                     (data[1 /* Age */] <2.5035105f ? 
                        0.014758893f : 
                        0.12004018f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.85961f ? 
                        -0.0073622456f : 
                        0.049723916f))) : 
             (data[1 /* Age */] <39.54755f ? 
                 (data[5 /* Fare */] <14.220312f ? 
                    -0.1946097f : 
                    -0.01638094f) : 
                 (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <53.32617f ? 
                        -0.008000148f : 
                        0.084834605f) : 
                    -0.1104692f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
                0.10267169f : 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
                    0.10317431f : 
                    0.10352461f)) : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 104, 0, data[6])) ? 
                0.104040004f : 
                0.10481037f)));
    return pred;
  } // constant pool size = 133B, number of visited nodes = 14, static init size = 450B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {10100000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {5, 0, 0, 0};
  // {00000000 00000010 01101001 00100000 00101011 00000001 00010100 00101010 00000001 00010111 01000000 00001001 00010000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 64, -106, 4, -44, -128, 40, 84, -128, -24, 2, -112, 8};
  // {11111110 11111111 11111011 11110111 11111111 11011111 01111110 11111110 11110111 11111111 11111111 10111101 11111111}
  public static final byte[] GRPSPLIT3 = new byte[] {127, -1, -33, -17, -1, -5, 126, 127, -17, -1, -1, -67, -1};
  // {00100000 00011000 00000010 01000100 00000000 00010000 00000000 10000000 00100000 00001000 00010100 10000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {4, 24, 64, 34, 0, 8, 0, 1, 4, 16, 40, 1, 0};
  // {00000000 00000000 00101000 00000000 00101000 00000000 00010100 00000010 00000001 00000010 00000000 00000001 00010000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 20, 0, 20, 0, 40, 64, -128, 64, 0, -128, 8};
}


class titanic_model_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_34_class_0.score0(fdata);
  }
}
class titanic_model_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367072.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <348825.5f ? 
             (data[1 /* Age */] <8.467813f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <2.5262635f ? 
                    0.014484738f : 
                    0.16074054f) : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <18.451231f ? 
                     (data[4 /* Ticket */] <339982.0f ? 
                        0.015962059f : 
                        -0.0887596f) : 
                     (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
                        -0.0052824593f : 
                        0.033437207f))) : 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <349947.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <20.5f ? 
                    -0.09613078f : 
                    -0.12956168f) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <364510.5f ? 
                    0.082735084f : 
                    -0.08382844f))) : 
         (data[4 /* Ticket */] <372413.5f ? 
            0.13301271f : 
             (data[4 /* Ticket */] <383073.5f ? 
                -0.0820339f : 
                0.07100638f)));
    return pred;
  } // constant pool size = 55B, number of visited nodes = 12, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_35_class_0.score0(fdata);
  }
}
class titanic_model_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
            -0.1043781f : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                -0.060909517f : 
                -0.10308402f)) : 
         (data[1 /* Age */] <5.449883f ? 
             (data[5 /* Fare */] <20.01286f ? 
                0.12174569f : 
                0.019690271f) : 
             (data[4 /* Ticket */] <230815.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <24.01543f ? 
                     (data[1 /* Age */] <39.507812f ? 
                        -0.03455341f : 
                        0.024321193f) : 
                     (data[5 /* Fare */] <27.749565f ? 
                        0.12787916f : 
                        0.084391676f)) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <365369.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <353901.5f ? 
                        -0.009460848f : 
                        -0.10434014f) : 
                     (data[1 /* Age */] <33.625f ? 
                        0.10007092f : 
                        0.013284149f)))));
    return pred;
  } // constant pool size = 92B, number of visited nodes = 12, static init size = 252B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 40};
  // {11101111 11111111 11111111 11111111 11101111 10111111 11110111 11111111 11111111 11111111 11011111 11011011 11010111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -1, -1, -1, -9, -3, -17, -1, -1, -1, -5, -37, -21};
  // {11000010 11100100 00000000 00000001 01000100 00000100 01000000 00000000 11000000 10000000 00000001 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {67, 39, 0, -128, 34, 32, 2, 0, 3, 1, -128, 0, 0};
}


class titanic_model_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_36_class_0.score0(fdata);
  }
}
class titanic_model_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
            -0.12280044f : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <19.964687f ? 
                -0.09028499f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                    -0.10794353f : 
                    0.020135757f))) : 
         (data[1 /* Age */] <5.449883f ? 
             (data[5 /* Fare */] <20.01286f ? 
                0.11948607f : 
                0.017765122f) : 
             (data[1 /* Age */] <11.474795f ? 
                -0.05494279f : 
                 (data[4 /* Ticket */] <339821.5f ? 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                        0.004213565f : 
                        0.05109518f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <19.75f ? 
                        -0.040307976f : 
                        0.006231793f)))));
    return pred;
  } // constant pool size = 89B, number of visited nodes = 10, static init size = 282B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 40};
  // {11101111 11111110 11111111 11101111 11101111 10111111 11010111 11111111 11111111 11111111 11111101 11011011 11111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, 127, -1, -9, -9, -3, -21, -1, -1, -1, -65, -37, -1};
  // {10000000 11100100 00000000 00000001 00000100 00000000 00000000 00000000 00000000 10000000 00000001 00000000 00000010}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 39, 0, -128, 32, 0, 0, 0, 0, 1, -128, 0, 64};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {3, 0, 0, 0};
}


class titanic_model_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_37_class_0.score0(fdata);
  }
}
class titanic_model_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367072.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <348825.5f ? 
             (data[1 /* Age */] <63.5091f ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
                        -0.12058616f : 
                        -0.052414536f) : 
                     (data[1 /* Age */] <8.306138f ? 
                        0.11253174f : 
                        0.010240892f)) : 
                 (data[4 /* Ticket */] <339982.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <14.220312f ? 
                        0.062515914f : 
                        -0.04536952f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <24.885548f ? 
                        -0.12766677f : 
                        -0.098986834f))) : 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <349947.5f ? 
                 (data[1 /* Age */] <32.53125f ? 
                    -0.114604674f : 
                    -0.11094453f) : 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <364510.5f ? 
                    0.07983461f : 
                    -0.07218597f))) : 
         (data[4 /* Ticket */] <372413.5f ? 
            0.11952061f : 
             (data[4 /* Ticket */] <383073.5f ? 
                -0.076564446f : 
                0.061200358f)));
    return pred;
  } // constant pool size = 86B, number of visited nodes = 14, static init size = 168B
  // {01101111 01011011 11101111 11101110 11101011 00111001 10010101 11111111 00111101 01011111 11011100 11001011 00011100}
  public static final byte[] GRPSPLIT0 = new byte[] {-10, -38, -9, 119, -41, -100, -87, -1, -68, -6, 59, -45, 56};
  // {11101111 11111111 11111111 11111111 11101111 10111111 11010111 11111111 11111111 11111111 11011101 11011011 01111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -1, -1, -1, -9, -3, -21, -1, -1, -1, -69, -37, -2};
}


class titanic_model_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_38_class_0.score0(fdata);
  }
}
class titanic_model_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (data[1 /* Age */] <35.48547f ? 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <1.5f ? 
                 (data[1 /* Age */] <14.333047f ? 
                     (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                        0.024991546f : 
                        0.100223586f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <30.802025f ? 
                        -0.0045967004f : 
                        0.038297456f)) : 
                 (data[5 /* Fare */] <22.30664f ? 
                    0.039492395f : 
                    -0.08696858f)) : 
             (data[1 /* Age */] <39.54755f ? 
                 (data[5 /* Fare */] <14.220312f ? 
                    -0.19869192f : 
                    -0.0089337295f) : 
                 (Double.isNaN(data[3]) || data[3 /* Parch */] <1.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <53.32617f ? 
                        -0.007469517f : 
                        0.08598694f) : 
                    -0.10379184f))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
             (!Double.isNaN(data[0 /* Sex */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
                    0.03122868f : 
                    0.10268653f) : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 104, 0, data[6])) ? 
                    0.10245231f : 
                    0.106277406f)) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 104, 0, data[6])) ? 
                0.103524595f : 
                0.10420578f)));
    return pred;
  } // constant pool size = 146B, number of visited nodes = 16, static init size = 480B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 40};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {00000000 00000010 00101001 00100000 00101011 00000001 00010100 00101010 00000001 00010110 01000000 00001001 00010000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 64, -108, 4, -44, -128, 40, 84, -128, 104, 2, -112, 8};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {11111110 11111111 11111011 11111111 11111111 11111111 01111110 01101111 11101111 11111111 11111111 10111101 11111011}
  public static final byte[] GRPSPLIT4 = new byte[] {127, -1, -33, -1, -1, -1, 126, -10, -9, -1, -1, -67, -33};
  // {00000000 00000000 01000010 01000000 00000000 00000000 00000000 10010000 00110000 00000000 00010000 10000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 66, 2, 0, 0, 0, 9, 12, 0, 8, 1, 0};
  // {00000000 00000000 00101000 00100000 00100000 00000000 00010100 00000000 00000000 00000010 00000000 00000001 00010000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 20, 4, 4, 0, 40, 0, 0, 64, 0, -128, 8};
}


class titanic_model_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_39_class_0.score0(fdata);
  }
}
class titanic_model_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <370100.5f ? 
             (data[1 /* Age */] <9.904922f ? 
                0.1151047f : 
                 (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[7])) ? 
                     (data[4 /* Ticket */] <6437.5f ? 
                        0.019549733f : 
                        -0.020160673f) : 
                    0.060601342f)) : 
            -0.07066219f) : 
         (data[4 /* Ticket */] <12804.5f ? 
             (data[2 /* SibSp */] <0.5f ? 
                0.028243594f : 
                -0.068113215f) : 
             (data[5 /* Fare */] <9.75293f ? 
                 (data[1 /* Age */] <22.554688f ? 
                    0.046041552f : 
                    -0.06788792f) : 
                 (data[5 /* Fare */] <17.6669f ? 
                     (data[4 /* Ticket */] <351227.5f ? 
                        0.028702157f : 
                        0.09367612f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <3.90625f ? 
                        -0.079936735f : 
                        0.033071764f)))));
    return pred;
  } // constant pool size = 60B, number of visited nodes = 12, static init size = 60B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
}


class titanic_model_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_40_class_0.score0(fdata);
  }
}
class titanic_model_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367072.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <354550.0f ? 
             (data[1 /* Age */] <63.5091f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <3425.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <49.310623f ? 
                        0.015454831f : 
                        0.10841264f) : 
                     (data[4 /* Ticket */] <8847.5f ? 
                        -0.09193554f : 
                        0.0013794346f)) : 
                 (data[4 /* Ticket */] <339489.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <14.220312f ? 
                        0.05720112f : 
                        -0.041568182f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <24.885548f ? 
                        -0.12020574f : 
                        -0.09579646f))) : 
            -0.08624824f) : 
         (data[4 /* Ticket */] <372413.5f ? 
            0.10648859f : 
             (data[4 /* Ticket */] <383073.5f ? 
                -0.06597049f : 
                0.056070633f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class titanic_model_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_41_class_0.score0(fdata);
  }
}
class titanic_model_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
            -0.11883909f : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <22.551485f ? 
                -0.08833764f : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                    -0.10669647f : 
                    0.024076184f))) : 
         (Double.isNaN(data[5]) || data[5 /* Fare */] <98.06301f ? 
             (data[4 /* Ticket */] <339821.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <26.015625f ? 
                     (Double.isNaN(data[7 /* Embarked */]) || !GenModel.bitSetIsInRange(32, 0, data[7]) || (GenModel.bitSetIsInRange(32, 0, data[7]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[7])) ? 
                        -0.010372966f : 
                        0.07505666f) : 
                     (data[5 /* Fare */] <30.014648f ? 
                        0.22229978f : 
                        0.064421475f)) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <23.90625f ? 
                     (data[1 /* Age */] <31.796875f ? 
                        0.020406488f : 
                        -0.023614338f) : 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <1.5f ? 
                        -0.017314186f : 
                        -0.099920705f))) : 
             (data[5 /* Fare */] <149.03717f ? 
                0.20596716f : 
                0.029980509f)));
    return pred;
  } // constant pool size = 101B, number of visited nodes = 13, static init size = 282B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10111111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -3, -68, -6, 59, -45, 40};
  // {11101111 11111111 11111111 11111111 11101111 10111101 11010111 11111111 11111111 11111111 11011111 11011011 11110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -1, -1, -1, -9, -67, -21, -1, -1, -1, -5, -37, -17};
  // {10000000 11100000 00010000 00000000 00000000 10000000 01000000 00000000 00000000 10000000 00000001 00000000 00000010}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 7, 8, 0, 0, 1, 2, 0, 0, 1, -128, 0, 64};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
}


class titanic_model_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_42_class_0.score0(fdata);
  }
}
class titanic_model_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367072.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <354550.0f ? 
             (data[1 /* Age */] <63.5091f ? 
                 (data[4 /* Ticket */] <3425.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <18.509531f ? 
                        -0.01279252f : 
                        0.092224404f) : 
                     (data[4 /* Ticket */] <14269.5f ? 
                        -0.08510194f : 
                        0.00816032f)) : 
                 (data[4 /* Ticket */] <339489.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <14.220312f ? 
                        0.05003877f : 
                        -0.03922796f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <24.885548f ? 
                        -0.11796647f : 
                        -0.094944164f))) : 
            -0.081087045f) : 
         (data[4 /* Ticket */] <372413.5f ? 
            0.09666433f : 
             (data[4 /* Ticket */] <383073.5f ? 
                -0.05717148f : 
                0.05260816f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class titanic_model_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_43_class_0.score0(fdata);
  }
}
class titanic_model_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <370100.5f ? 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <349899.0f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <347170.5f ? 
                     (data[1 /* Age */] <10.192344f ? 
                        0.108196184f : 
                        -0.008736535f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <19.964687f ? 
                        -0.09013581f : 
                        -0.11781701f)) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <8.005144f ? 
                    0.1104844f : 
                    0.0011703318f)) : 
            -0.06439785f) : 
         (data[4 /* Ticket */] <12804.5f ? 
             (data[2 /* SibSp */] <0.5f ? 
                0.029467123f : 
                -0.057081856f) : 
             (data[5 /* Fare */] <9.75293f ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <7.7587967f ? 
                    0.024003534f : 
                    -0.07645393f) : 
                 (data[5 /* Fare */] <17.6669f ? 
                     (data[4 /* Ticket */] <351227.5f ? 
                        0.026003305f : 
                        0.08833541f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <3.90625f ? 
                        -0.071081184f : 
                        0.029579515f)))));
    return pred;
  } // constant pool size = 63B, number of visited nodes = 14, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_44_class_0.score0(fdata);
  }
}
class titanic_model_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367072.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <354550.0f ? 
             (data[1 /* Age */] <8.467813f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <3.5008032f ? 
                    -0.009520209f : 
                    0.15819775f) : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <18.451231f ? 
                     (data[4 /* Ticket */] <339489.5f ? 
                        0.008533584f : 
                        -0.07898262f) : 
                     (data[5 /* Fare */] <8.005144f ? 
                        0.027314385f : 
                        -0.00158057f))) : 
            -0.07930591f) : 
         (data[4 /* Ticket */] <372413.5f ? 
            0.083694376f : 
             (data[4 /* Ticket */] <383073.5f ? 
                -0.052214503f : 
                0.04921569f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class titanic_model_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_45_class_0.score0(fdata);
  }
}
class titanic_model_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (data[1 /* Age */] <35.48547f ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <32.88447f ? 
                 (data[4 /* Ticket */] <1733071.0f ? 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <26.625156f ? 
                        -0.016457634f : 
                        0.03355015f) : 
                     (data[1 /* Age */] <20.411562f ? 
                        0.12427059f : 
                        3.7605452E-4f)) : 
                 (data[4 /* Ticket */] <243764.5f ? 
                    0.010955077f : 
                     (data[1 /* Age */] <18.5f ? 
                        -0.06608137f : 
                        -0.07881528f))) : 
             (Double.isNaN(data[2]) || data[2 /* SibSp */] <1.5f ? 
                 (data[5 /* Fare */] <7.110156f ? 
                    -0.11624556f : 
                     (data[1 /* Age */] <39.5625f ? 
                        -0.088827126f : 
                        -0.008192274f)) : 
                0.08218386f)) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 104, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
                    0.101626605f : 
                    0.10199897f) : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
                    0.10237351f : 
                    0.10270082f)) : 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 104, 0, data[6])) ? 
                0.103174284f : 
                0.10387824f)));
    return pred;
  } // constant pool size = 150B, number of visited nodes = 16, static init size = 504B
  // {00101101 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {-76, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {00100000 00000000 00101000 00100000 00101000 00000000 00010100 00001010 00000000 00010110 01000000 00000001 00010000}
  public static final byte[] GRPSPLIT1 = new byte[] {4, 0, 20, 4, 20, 0, 40, 80, 0, 104, 2, -128, 8};
  // {11111110 11110111 01111001 01110111 01111111 11010111 01111110 11111010 11110011 11111111 01110011 10111101 11111011}
  public static final byte[] GRPSPLIT2 = new byte[] {127, -17, -98, -18, -2, -21, 126, 95, -49, -1, -50, -67, -33};
  // {11111110 11111111 11111111 11110111 11111111 11111111 01111111 11111110 11110111 11111111 11110011 10111111 11111011}
  public static final byte[] GRPSPLIT3 = new byte[] {127, -1, -1, -17, -1, -1, -2, 127, -17, -1, -49, -3, -33};
  // {00000000 00010010 00000001 00000010 00000001 00000001 00000000 00000000 00010000 01000001 00010000 10001000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 72, -128, 64, -128, -128, 0, 0, 8, -126, 8, 17, 0};
  // {11011111 11111111 11111111 11111111 11110111 11111111 11101111 11111101 11111111 11101001 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, -1, -1, -1, -17, -1, -9, -65, -1, -105, -1, -1, -1};
}


class titanic_model_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_46_class_0.score0(fdata);
  }
}
class titanic_model_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <370100.5f ? 
             (Double.isNaN(data[4]) || data[4 /* Ticket */] <349899.0f ? 
                 (Double.isNaN(data[4]) || data[4 /* Ticket */] <347170.5f ? 
                     (data[1 /* Age */] <10.192344f ? 
                        0.10310051f : 
                        -0.007993537f) : 
                     (Double.isNaN(data[1]) || data[1 /* Age */] <19.964687f ? 
                        -0.08791109f : 
                        -0.11645498f)) : 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <8.005144f ? 
                    0.09359693f : 
                    0.0036169477f)) : 
            -0.060646936f) : 
         (Double.isNaN(data[1]) || data[1 /* Age */] <49.497284f ? 
             (Double.isNaN(data[1]) || data[1 /* Age */] <42.45178f ? 
                 (data[5 /* Fare */] <10.753906f ? 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <7.8760986f ? 
                        0.032537587f : 
                        -0.09807205f) : 
                     (Double.isNaN(data[3]) || data[3 /* Parch */] <0.5f ? 
                        0.06254811f : 
                        -0.0027172992f)) : 
                -0.12682131f) : 
            0.083185546f));
    return pred;
  } // constant pool size = 55B, number of visited nodes = 12, static init size = 30B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_47_class_0.score0(fdata);
  }
}
class titanic_model_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
        -0.11773566f : 
         (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (Double.isNaN(data[5]) || data[5 /* Fare */] <110.070724f ? 
                 (data[5 /* Fare */] <7.739348f ? 
                     (data[1 /* Age */] <28.0125f ? 
                        0.051848736f : 
                        -0.11634177f) : 
                     (Double.isNaN(data[5]) || data[5 /* Fare */] <26.70697f ? 
                        0.011953892f : 
                        -0.052532077f)) : 
                0.10510318f) : 
             (Double.isNaN(data[1]) || data[1 /* Age */] <49.56914f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <42.51325f ? 
                     (data[5 /* Fare */] <10.753906f ? 
                        -0.01533958f : 
                        0.028735427f) : 
                    -0.1157403f) : 
                0.12918575f)));
    return pred;
  } // constant pool size = 57B, number of visited nodes = 9, static init size = 114B
  // {11101111 11011111 11111111 11111111 11101111 10111101 11110111 11111111 11111111 11111111 11111110 11011011 11110111}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -5, -1, -1, -9, -67, -17, -1, -1, -1, 127, -37, -17};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
}


class titanic_model_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_48_class_0.score0(fdata);
  }
}
class titanic_model_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || data[4 /* Ticket */] <367072.5f ? 
         (Double.isNaN(data[4]) || data[4 /* Ticket */] <354550.0f ? 
             (data[1 /* Age */] <8.467813f ? 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <3.5008032f ? 
                    -0.009474928f : 
                    0.15446196f) : 
                 (Double.isNaN(data[1]) || data[1 /* Age */] <18.451231f ? 
                     (Double.isNaN(data[2]) || data[2 /* SibSp */] <1.5f ? 
                        -0.010389553f : 
                        -0.12804298f) : 
                     (data[5 /* Fare */] <8.005144f ? 
                        0.026717214f : 
                        -0.0020460829f))) : 
            -0.077232346f) : 
         (data[4 /* Ticket */] <372413.5f ? 
            0.07362554f : 
             (data[4 /* Ticket */] <383073.5f ? 
                -0.044965994f : 
                0.047878675f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class titanic_model_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += titanic_model_Tree_49_class_0.score0(fdata);
  }
}
class titanic_model_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT0, 104, 0, data[6])) ? 
         (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 104, 0, data[6])) ? 
            -0.115741774f : 
             (Double.isNaN(data[0 /* Sex */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5]) || data[5 /* Fare */] <16.010288f ? 
                     (Double.isNaN(data[3]) || data[3 /* Parch */] <0.5f ? 
                        -0.008958554f : 
                        0.12583394f) : 
                     (data[1 /* Age */] <31.461563f ? 
                        -0.0670853f : 
                        0.005198069f)) : 
                 (Double.isNaN(data[2]) || data[2 /* SibSp */] <0.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* Ticket */] <293125.0f ? 
                        0.05665248f : 
                        -0.026387732f) : 
                     (data[5 /* Fare */] <15.8f ? 
                        -0.05649451f : 
                        0.014021254f)))) : 
         (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 104, 0, data[6])) ? 
             (!Double.isNaN(data[6 /* Cabin */]) && (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 104, 0, data[6])) ? 
                 (data[2 /* SibSp */] <0.5f ? 
                    0.101570204f : 
                    0.101462245f) : 
                 (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 104, 0, data[6])) ? 
                    0.10204208f : 
                    0.102354474f)) : 
             (Double.isNaN(data[6 /* Cabin */]) || !GenModel.bitSetIsInRange(104, 0, data[6]) || (GenModel.bitSetIsInRange(104, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 104, 0, data[6])) ? 
                0.102841f : 
                0.10361788f)));
    return pred;
  } // constant pool size = 147B, number of visited nodes = 14, static init size = 534B
  // {00101100 00011010 11101111 11101110 10101011 00111001 10010101 10101111 00111101 01011111 11011100 11001011 00010100}
  public static final byte[] GRPSPLIT0 = new byte[] {52, 88, -9, 119, -43, -100, -87, -11, -68, -6, 59, -45, 40};
  // {11101111 11111111 11111111 11111111 11101111 10111111 10110101 11111111 11111111 11111111 11011111 11011011 11110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-9, -1, -1, -1, -9, -3, -83, -1, -1, -1, -5, -37, -17};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {00100000 00000000 01101000 00100010 00101000 00000000 00010100 00001010 00110000 01010110 01000000 00000001 00010000}
  public static final byte[] GRPSPLIT3 = new byte[] {4, 0, 22, 68, 20, 0, 40, 80, 12, 106, 2, -128, 8};
  // {11111111 11111111 01111101 01110111 11111111 11010111 01111111 11111010 11110111 11110111 01110011 10111101 11111011}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -66, -18, -1, -21, -2, 95, -17, -17, -50, -67, -33};
  // {11111011 11111101 11111011 10111111 01111101 11101111 11111110 01011111 11111011 11111111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-33, -65, -33, -3, -66, -9, 127, -6, -33, -1, -1, -1, -1};
  // {00100000 00000000 00001000 00100000 00000000 00000000 00000000 00001010 00000000 00000100 01000000 00000001 00010000}
  public static final byte[] GRPSPLIT6 = new byte[] {4, 0, 16, 4, 0, 0, 0, 80, 0, 32, 2, -128, 8};
}


